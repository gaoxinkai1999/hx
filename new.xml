This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.gitignore
hx-api/HELP.md
hx-api/mvnw
hx-api/mvnw.cmd
hx-api/pom.xml
hx-api/src/main/java/com/example/hx_api/client/HxApiClient.java
hx-api/src/main/java/com/example/hx_api/client/model/request/BaseRequest.java
hx-api/src/main/java/com/example/hx_api/client/model/request/CustomerInfoRequest.java
hx-api/src/main/java/com/example/hx_api/client/model/request/CustomerListRequest.java
hx-api/src/main/java/com/example/hx_api/client/model/request/FindVipByPhoneRequest.java
hx-api/src/main/java/com/example/hx_api/client/model/request/RfmRequest.java
hx-api/src/main/java/com/example/hx_api/client/model/response/ApiResponse.java
hx-api/src/main/java/com/example/hx_api/client/model/response/ResponseWrapper.java
hx-api/src/main/java/com/example/hx_api/common/exception/BusinessException.java
hx-api/src/main/java/com/example/hx_api/common/exception/GlobalExceptionHandler.java
hx-api/src/main/java/com/example/hx_api/common/response/Result.java
hx-api/src/main/java/com/example/hx_api/common/util/DateUtil.java
hx-api/src/main/java/com/example/hx_api/config/ForestGlobalConfig.java
hx-api/src/main/java/com/example/hx_api/config/WebConfig.java
hx-api/src/main/java/com/example/hx_api/constant/SystemConstants.java
hx-api/src/main/java/com/example/hx_api/controller/DeptController.java
hx-api/src/main/java/com/example/hx_api/controller/UserController.java
hx-api/src/main/java/com/example/hx_api/controller/VipController.java
hx-api/src/main/java/com/example/hx_api/mapper/DeptMapper.java
hx-api/src/main/java/com/example/hx_api/mapper/UserMapper.java
hx-api/src/main/java/com/example/hx_api/mapper/VipMapper.java
hx-api/src/main/java/com/example/hx_api/model/dto/UserDTO.java
hx-api/src/main/java/com/example/hx_api/model/dto/VipDTO.java
hx-api/src/main/java/com/example/hx_api/model/entity/Dept.java
hx-api/src/main/java/com/example/hx_api/model/entity/User.java
hx-api/src/main/java/com/example/hx_api/model/entity/Vip.java
hx-api/src/main/java/com/example/hx_api/model/vo/DeptVO.java
hx-api/src/main/java/com/example/hx_api/model/vo/UserBasicVO.java
hx-api/src/main/java/com/example/hx_api/model/vo/UserVO.java
hx-api/src/main/java/com/example/hx_api/model/vo/VipVO.java
hx-api/src/main/java/com/example/hx_api/service/DeptService.java
hx-api/src/main/java/com/example/hx_api/service/impl/DeptServiceImpl.java
hx-api/src/main/java/com/example/hx_api/service/impl/UserServiceImpl.java
hx-api/src/main/java/com/example/hx_api/service/impl/VipServiceImpl.java
hx-api/src/main/java/com/example/hx_api/service/UserService.java
hx-api/src/main/java/com/example/hx_api/service/VipService.java
hx-api/src/main/java/com/example/hx_api/ShoubaApplication.java
hx-api/src/main/java/com/example/hx_api/task/VipDataUpdateTask.java
hx-api/src/main/resources/application-dev.yml
hx-api/src/main/resources/application-prod.yml
hx-api/src/main/resources/application.yml
hx-api/src/test/java/com/example/hx_api/ShoubaApplicationTests.java
hx-mobel-vue/babel.config.js
hx-mobel-vue/jsconfig.json
hx-mobel-vue/package.json
hx-mobel-vue/public/index.html
hx-mobel-vue/README.md
hx-mobel-vue/route/router.js
hx-mobel-vue/src/App.vue
hx-mobel-vue/src/components/AddVip.vue
hx-mobel-vue/src/components/AllDept.vue
hx-mobel-vue/src/components/AllUser.vue
hx-mobel-vue/src/components/AllVips.vue
hx-mobel-vue/src/components/Index.vue
hx-mobel-vue/src/components/Login.vue
hx-mobel-vue/src/components/Mine.vue
hx-mobel-vue/src/components/MyVip.vue
hx-mobel-vue/src/components/Register.vue
hx-mobel-vue/src/components/VipInfo.vue
hx-mobel-vue/src/components/Vips.vue
hx-mobel-vue/src/main.js
hx-mobel-vue/src/services/api.js
hx-mobel-vue/vue.config.js
hx-mobel-vue/vuex/store.js
hx-pc-vue/babel.config.js
hx-pc-vue/jsconfig.json
hx-pc-vue/package.json
hx-pc-vue/public/index.html
hx-pc-vue/README.md
hx-pc-vue/route/router.js
hx-pc-vue/src/App.vue
hx-pc-vue/src/components/demo/MyIndex.vue
hx-pc-vue/src/components/FindVip.vue
hx-pc-vue/src/components/Index.vue
hx-pc-vue/src/components/Login.vue
hx-pc-vue/src/components/MyTable.vue
hx-pc-vue/src/main.js
hx-pc-vue/src/services/api.js
hx-pc-vue/vue.config.js
hx-pc-vue/vuex/store.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="hx-api/src/main/java/com/example/hx_api/client/HxApiClient.java">
package com.example.hx_api.client;

import com.alibaba.fastjson.JSONObject;
import com.dtflys.forest.annotation.BaseRequest;
import com.dtflys.forest.annotation.Body;
import com.dtflys.forest.annotation.Post;
import com.example.hx_api.client.model.request.CustomerInfoRequest;
import com.example.hx_api.client.model.request.CustomerListRequest;
import com.example.hx_api.client.model.request.RfmRequest;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

/**
 * 和兴系统API客户端
 */
@Component
@Scope("prototype")
@BaseRequest(baseURL = "${globalApiBaseUrl}")
public interface HxApiClient {

    /**
     * 获取用户列表
     *
     * @param request 用户列表请求参数
     * @return API响应
     */
    @Post("/AppGet.aspx")
    JSONObject getCustomerList(@Body CustomerListRequest request);

    /**
     * 获取会员详情
     *
     * @param request 会员详情请求参数
     * @return API响应
     */
    @Post("/AppGet.aspx")
    JSONObject getCustomerInfo(@Body CustomerInfoRequest request);

    /**
     * 获取会员RFM信息
     *
     * @param request RFM请求参数
     * @return API响应
     */
    @Post("/AppGet.aspx")
    JSONObject getRfmInfo(@Body RfmRequest request);

    /**
     * 通用API请求
     *
     * @param params 请求参数
     * @return JSON响应
     */
    @Post("/AppGet.aspx")
    JSONObject sendRequest(@Body Object params);
}
</file>

<file path="hx-api/src/main/java/com/example/hx_api/client/model/request/BaseRequest.java">
package com.example.hx_api.client.model.request;

import lombok.Data;

/**
 * API基础请求参数
 */
@Data
public abstract class BaseRequest {
    /**
     * 数据库名称
     */
    protected String dbname = "xerp_qxhexingxc";
    
    /**
     * 业务ID
     */
    protected Integer bsid = 255982;
    
    /**
     * 令牌ID
     */
    protected String tokenid = "443842AC-E352-4AD0-B454-9671585E16EB";
    
    /**
     * 推送令牌ID
     */
    protected String pushtokenid = "";
    
    /**
     * 设备类型
     */
    protected Integer device = 1;
    
    /**
     * 版本号
     */
    protected String version = "3.5.7";
}
</file>

<file path="hx-api/src/main/java/com/example/hx_api/client/model/request/CustomerInfoRequest.java">
package com.example.hx_api.client.model.request;

import lombok.Data;
import lombok.EqualsAndHashCode;

/**
 * 会员详情请求参数
 */
@Data
@EqualsAndHashCode(callSuper = true)
public class CustomerInfoRequest extends BaseRequest {
    /**
     * 请求类型
     */
    private String type = "GetVipInfo";
    
    /**
     * 会员ID
     */
    private Integer hyid;
    
    /**
     * 构造函数
     *
     * @param hyid 会员ID
     */
    public CustomerInfoRequest(Integer hyid) {
        this.hyid = hyid;
    }
}
</file>

<file path="hx-api/src/main/java/com/example/hx_api/client/model/request/CustomerListRequest.java">
package com.example.hx_api.client.model.request;

import lombok.Data;
import lombok.EqualsAndHashCode;

/**
 * 用户列表请求参数
 */
@Data
@EqualsAndHashCode(callSuper = true)
public class CustomerListRequest extends BaseRequest {
    /**
     * 请求类型
     */
    private String type = "RunProc";
    
    /**
     * 存储过程名称
     */
    private String procName = "p_klqe_QueryVipLimit_new";
    
    /**
     * 存储过程参数
     */
    private String procArray;
    
    /**
     * 设置全部会员查询参数
     *
     * @param pageId 页码
     */
    public void setAllCustomersParam(int pageId) {
        StringBuilder builder = new StringBuilder();
        builder.append("{\"INFO\":[");
        builder.append("{\"FIELD\":\"queryType\",\"VALUE\":\"all\",\"TYPE\":1},");
        builder.append("{\"FIELD\":\"orderType\",\"VALUE\":\"totalmoney\",\"TYPE\":1},");
        builder.append("{\"FIELD\":\"pageid\",\"VALUE\":").append(pageId).append(",\"TYPE\":0},");
        builder.append("{\"FIELD\":\"bsid\",\"VALUE\":255982,\"TYPE\":0},");
        builder.append("{\"FIELD\":\"filterJson\",\"VALUE\":\"");
        // 过滤参数构建
        builder.append("{\\\"fvalue\\\":\\\"2,3,4,5,6\\\",");
        builder.append("\\\"mvalue\\\":\\\"2,3,4,5,6\\\",");
        builder.append("\\\"rvalue\\\":\\\"1,2,3\\\"}\",\"TYPE\":1}");
        builder.append("]}");
        this.procArray = builder.toString();
    }
}
</file>

<file path="hx-api/src/main/java/com/example/hx_api/client/model/request/FindVipByPhoneRequest.java">
package com.example.hx_api.client.model.request;

import lombok.Data;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Data
public class FindVipByPhoneRequest {
    private String type = "RunProc";
    private String dbname = "xerp_qxhexingxc"; // 与旧版一致
    private String ProcName = "p_MB_ios_queryVipParam"; // 与旧版一致
    private String ProcArray;

    // 根据旧版逻辑，bsid, tokenid 等不是顶级字段，而是 ProcArray 的一部分
    // 我们这里保持与旧版请求参数类的结构一致，方便理解和迁移
    // 如果外部API的实际调用方式有变，需要调整此类或 HxApiClient 的调用方式

    public FindVipByPhoneRequest(String phone) {
        Map<String, Object> fieldBsid = new HashMap<>();
        fieldBsid.put("FIELD", "bsid");
        fieldBsid.put("VALUE", "2"); // 旧版固定为 "2"
        fieldBsid.put("TYPE", 1);

        Map<String, Object> fieldParam = new HashMap<>();
        fieldParam.put("FIELD", "param");
        fieldParam.put("VALUE", phone);
        fieldParam.put("TYPE", 1);

        Map<String, Object> fieldPageId = new HashMap<>();
        fieldPageId.put("FIELD", "pageid:"); // 注意旧版有个冒号
        fieldPageId.put("VALUE", 1);
        fieldPageId.put("TYPE", 0);

        Map<String, Object> fieldIsExact = new HashMap<>();
        fieldIsExact.put("FIELD", "isExact");
        fieldIsExact.put("VALUE", 1);
        fieldIsExact.put("TYPE", 0);

        List<Map<String, Object>> infoList = new ArrayList<>();
        infoList.add(fieldBsid);
        infoList.add(fieldParam);
        infoList.add(fieldPageId);
        infoList.add(fieldIsExact);

        Map<String, List<Map<String, Object>>> procArrayMap = new HashMap<>();
        procArrayMap.put("INFO", infoList);

        // 将Map转换为JSON字符串
        // 注意：这里简单地用了toString()，实际可能需要一个JSON库如FastJSON或Jackson来序列化
        // 但由于旧版是直接拼接字符串，这里也尽量模拟。
        // 更健壮的方式是让HxApiClient的sendRequest方法接受Map，并在内部用JSON库序列化。
        // 或者，如果外部API能接受更结构化的JSON，则直接传递Map。
        // 为保持与旧版ProcArray字符串格式一致，这里手动构造。
        StringBuilder sb = new StringBuilder("{\n");
        sb.append("        \"INFO\":[\n");
        sb.append("        {\n");
        sb.append("        \"FIELD\":\"bsid\",\n");
        sb.append("        \"VALUE\":\"2\",\n"); // 旧版固定为 "2"
        sb.append("        \"TYPE\":1\n");
        sb.append("        },\n");
        sb.append("        {\n");
        sb.append("        \"FIELD\":\"param\",\n");
        sb.append("        \"VALUE\":\"").append(phone).append("\",\n"); // 确保phone作为字符串
        sb.append("        \"TYPE\":1\n");
        sb.append("        },\n");
        sb.append("        {\n");
        sb.append("        \"FIELD\":\"pageid:\",\n");
        sb.append("        \"VALUE\":1,\n");
        sb.append("        \"TYPE\":0\n");
        sb.append("        },\n");
        sb.append("        {\n");
        sb.append("        \"FIELD\":\"isExact\",\n");
        sb.append("        \"VALUE\":1,\n");
        sb.append("        \"TYPE\":0\n");
        sb.append("        }\n");
        sb.append("        ]\n");
        sb.append("        }");
        this.ProcArray = sb.toString();
    }
}
</file>

<file path="hx-api/src/main/java/com/example/hx_api/client/model/request/RfmRequest.java">
package com.example.hx_api.client.model.request;

import lombok.Data;
import lombok.EqualsAndHashCode;

/**
 * RFM参数请求
 */
@Data
@EqualsAndHashCode(callSuper = true)
public class RfmRequest extends BaseRequest {
    /**
     * 请求类型
     */
    private String type = "New_Getvipwechatid";
    
    /**
     * 会员ID，对应原键值key_id
     */
    private Integer keyId;
    
    /**
     * 构造函数
     *
     * @param hyid 会员ID
     */
    public RfmRequest(Integer hyid) {
        this.keyId = hyid;
    }
}
</file>

<file path="hx-api/src/main/java/com/example/hx_api/client/model/response/ApiResponse.java">
package com.example.hx_api.client.model.response;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import lombok.Data;

/**
 * API响应类
 */
@Data
public class ApiResponse {
    /**
     * 状态码
     */
    private Integer STATUS;
    
    /**
     * 响应消息
     * 可能是JSONArray或JSONObject，使用Object类型以支持两种情况
     */
    private Object MESSAGE;
    
    /**
     * 判断响应是否成功
     *
     * @return 是否成功
     */
    public boolean isSuccess() {
        return STATUS != null && STATUS == 0;
    }
    
    /**
     * 获取消息内容为JSONObject
     * 
     * @return JSONObject类型的消息或null
     */
    public JSONObject getMessageAsObject() {
        if (MESSAGE instanceof JSONObject) {
            return (JSONObject) MESSAGE;
        } else if (MESSAGE instanceof JSONArray && ((JSONArray) MESSAGE).size() > 0) {
            Object item = ((JSONArray) MESSAGE).get(0);
            if (item instanceof JSONObject) {
                return (JSONObject) item;
            }
        }
        return null;
    }
    
    /**
     * 获取消息内容为JSONArray
     * 
     * @return JSONArray类型的消息或null
     */
    public JSONArray getMessageAsArray() {
        if (MESSAGE instanceof JSONArray) {
            return (JSONArray) MESSAGE;
        } else if (MESSAGE instanceof JSONObject) {
            JSONArray array = new JSONArray();
            array.add(MESSAGE);
            return array;
        }
        return null;
    }
}
</file>

<file path="hx-api/src/main/java/com/example/hx_api/client/model/response/ResponseWrapper.java">
package com.example.hx_api.client.model.response;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import lombok.Data;

/**
 * API响应包装类
 * 用于处理外部API返回的复杂JSON结构
 */
@Data
public class ResponseWrapper {
    /**
     * 状态码
     */
    private Integer STATUS;
    
    /**
     * 响应消息
     */
    private JSONObject MESSAGE;
    
    /**
     * 判断响应是否成功
     *
     * @return 是否成功
     */
    public boolean isSuccess() {
        return STATUS != null && STATUS == 0;
    }
}
</file>

<file path="hx-api/src/main/java/com/example/hx_api/common/exception/BusinessException.java">
package com.example.hx_api.common.exception;

import lombok.Getter;

/**
 * 业务异常
 */
@Getter
public class BusinessException extends RuntimeException {
    
    private Integer code;
    
    public BusinessException(String message) {
        super(message);
        this.code = 500;
    }
    
    public BusinessException(Integer code, String message) {
        super(message);
        this.code = code;
    }
    
    public BusinessException(String message, Throwable cause) {
        super(message, cause);
        this.code = 500;
    }
}
</file>

<file path="hx-api/src/main/java/com/example/hx_api/common/exception/GlobalExceptionHandler.java">
package com.example.hx_api.common.exception;

import com.example.hx_api.common.response.Result;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

/**
 * 全局异常处理
 */
@Slf4j
@RestControllerAdvice
public class GlobalExceptionHandler {
    
    /**
     * 处理业务异常
     */
    @ExceptionHandler(BusinessException.class)
    public Result<Void> handleBusinessException(BusinessException e) {
        log.error("业务异常：", e);
        return Result.fail(e.getCode(), e.getMessage());
    }
    
    /**
     * 处理未知异常
     */
    @ExceptionHandler(Exception.class)
    public Result<Void> handleException(Exception e) {
        log.error("系统异常：", e);
        return Result.fail("系统繁忙，请稍后再试");
    }
}
</file>

<file path="hx-api/src/main/java/com/example/hx_api/common/response/Result.java">
package com.example.hx_api.common.response;

import lombok.Data;

/**
 * 统一API响应格式
 */
@Data
public class Result<T> {
    /**
     * 状态码
     */
    private Integer code;
    
    /**
     * 响应消息
     */
    private String message;
    
    /**
     * 响应数据
     */
    private T data;
    
    private Result(Integer code, String message, T data) {
        this.code = code;
        this.message = message;
        this.data = data;
    }
    
    /**
     * 成功响应（无数据）
     */
    public static <T> Result<T> success() {
        return new Result<>(200, "操作成功", null);
    }
    
    /**
     * 成功响应（有数据）
     */
    public static <T> Result<T> success(T data) {
        return new Result<>(200, "操作成功", data);
    }
    
    /**
     * 失败响应
     */
    public static <T> Result<T> fail(String message) {
        return new Result<>(500, message, null);
    }
    
    /**
     * 自定义状态码的失败响应
     */
    public static <T> Result<T> fail(Integer code, String message) {
        return new Result<>(code, message, null);
    }
}
</file>

<file path="hx-api/src/main/java/com/example/hx_api/common/util/DateUtil.java">
package com.example.hx_api.common.util;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * 日期工具类
 */
public class DateUtil {
    
    private static final String DEFAULT_PATTERN = "yyyy-MM-dd HH:mm:ss";
    
    /**
     * 日期格式化为字符串
     *
     * @param date 日期
     * @return 格式化后的字符串
     */
    public static String format(Date date) {
        return format(date, DEFAULT_PATTERN);
    }
    
    /**
     * 日期格式化为字符串
     *
     * @param date    日期
     * @param pattern 格式
     * @return 格式化后的字符串
     */
    public static String format(Date date, String pattern) {
        if (date == null) {
            return null;
        }
        SimpleDateFormat sdf = new SimpleDateFormat(pattern);
        return sdf.format(date);
    }
    
    /**
     * 字符串解析为日期
     *
     * @param dateStr 日期字符串
     * @return 解析后的日期
     */
    public static Date parse(String dateStr) {
        return parse(dateStr, DEFAULT_PATTERN);
    }
    
    /**
     * 字符串解析为日期
     *
     * @param dateStr 日期字符串
     * @param pattern 格式
     * @return 解析后的日期
     */
    public static Date parse(String dateStr, String pattern) {
        if (dateStr == null || dateStr.isEmpty()) {
            return null;
        }
        try {
            SimpleDateFormat sdf = new SimpleDateFormat(pattern);
            return sdf.parse(dateStr);
        } catch (ParseException e) {
            throw new RuntimeException("日期解析异常", e);
        }
    }
}
</file>

<file path="hx-api/src/main/java/com/example/hx_api/config/ForestGlobalConfig.java">
package com.example.hx_api.config;

import com.dtflys.forest.Forest;
import com.dtflys.forest.config.ForestConfiguration;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;

import javax.annotation.PostConstruct;

@Configuration
public class ForestGlobalConfig {

    @Value("${hxApiBaseUrl}")
    private String hxApiBaseUrlValue;

    @PostConstruct
    public void init() {
        // 获取全局配置
        ForestConfiguration configuration = Forest.config();
        // 设置全局变量
        configuration.setVariableValue("globalApiBaseUrl", hxApiBaseUrlValue);
    }
}
</file>

<file path="hx-api/src/main/java/com/example/hx_api/config/WebConfig.java">
package com.example.hx_api.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

/**
 * Web配置类
 */
@Configuration
public class WebConfig implements WebMvcConfigurer {

    /**
     * 配置全局跨域
     */
    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**")
                .allowedOrigins("http://127.0.0.1:8080", "http://localhost:8080", "http://localhost:8081")
                .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS")
                .allowedHeaders("*")
                .allowCredentials(true)
                .maxAge(3600);
    }

    /**
     * 配置CORS过滤器，处理跨域请求
     */
    @Bean
    public CorsFilter corsFilter() {
        CorsConfiguration config = new CorsConfiguration();
        // 允许所有域名跨域
        config.addAllowedOrigin("http://127.0.0.1:8080");
        config.addAllowedOrigin("http://localhost:8080");
        config.addAllowedOrigin("http://localhost:8081");
        // 允许携带cookie跨域
        config.setAllowCredentials(true);
        // 允许所有请求头
        config.addAllowedHeader("*");
        // 允许所有请求方法
        config.addAllowedMethod("*");

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", config);
        return new CorsFilter(source);
    }
}
</file>

<file path="hx-api/src/main/java/com/example/hx_api/constant/SystemConstants.java">
package com.example.hx_api.constant;

/**
 * 系统常量
 */
public class SystemConstants {
    
    /**
     * 默认业务ID
     */
    public static final int DEFAULT_BUSINESS_ID = 255982;
    
    /**
     * 默认TokenID
     */
    public static final String DEFAULT_TOKEN_ID = "443842AC-E352-4AD0-B454-9671585E16EB";
    
    /**
     * 默认数据库名称
     */
    public static final String DEFAULT_DB_NAME = "xerp_qxhexingxc";
    
    /**
     * 念念不忘天数阈值
     */
    public static final int NEVER_FORGET_DAYS_THRESHOLD = 180;
    
    /**
     * 念念不忘记录限制
     */
    public static final int NEVER_FORGET_LIMIT = 200;
    
}
</file>

<file path="hx-api/src/main/java/com/example/hx_api/controller/DeptController.java">
package com.example.hx_api.controller;

import com.alibaba.fastjson.JSONObject;
import com.example.hx_api.common.response.Result;
import com.example.hx_api.model.vo.DeptVO;
import com.example.hx_api.service.DeptService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * 部门接口
 */
@RestController
@RequestMapping("/api/depts")
@CrossOrigin // 允许跨域请求
public class DeptController {

    @Autowired
    private DeptService deptService;

    /**
     * 获取所有部门列表 (不含用户信息)
     * 对应旧 /getDepts
     */
    @GetMapping
    public Result<List<DeptVO>> getAllDepts() {
        return Result.success(deptService.getAllDepts());
    }

    /**
     * 获取级联部门列表 (包含部门下的用户基本信息)
     * 对应旧 /getCascadeDept
     */
    @GetMapping("/cascade")
    public Result<List<DeptVO>> getCascadeDepts() {
        return Result.success(deptService.getCascadeDepts());
    }

    /**
     * 根据部门ID获取部门下各用户的VIP统计信息
     * 对应旧 /getDeptCountById
     * @param deptId 部门ID
     * @return 统计信息列表
     */
    @GetMapping("/{deptId}/stats")
    public Result<List<JSONObject>> getDeptStatsById(@PathVariable Integer deptId) {
        return Result.success(deptService.getDeptStatsById(deptId));
    }
}
</file>

<file path="hx-api/src/main/java/com/example/hx_api/controller/UserController.java">
package com.example.hx_api.controller;

import com.example.hx_api.common.response.Result;
import com.example.hx_api.model.dto.UserDTO;
import com.example.hx_api.model.vo.UserVO;
import com.example.hx_api.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

/**
 * 用户控制器
 */
@RestController
@RequestMapping("/api/user")
@CrossOrigin
public class UserController {
    @Autowired
    private UserService userService;
    
    /**
     * 用户登录
     */
    @PostMapping("/login")
    public Result<UserVO> login(@RequestBody UserDTO userDTO) {
        UserVO userVO = userService.login(userDTO);
        if (userVO == null) {
            return Result.fail("用户名或密码错误");
        }
        return Result.success(userVO);
    }
    
    /**
     * 获取用户信息
     */
    @GetMapping("/{id}")
    public Result<UserVO> getUserInfo(@PathVariable Integer id) {
        return Result.success(userService.getUserInfo(id));
    }
    
    /**
     * 更新用户信息
     */
    @PutMapping
    public Result<Void> updateUser(@RequestBody UserDTO userDTO) {
        userService.updateUser(userDTO);
        return Result.success();
    }
    
    /**
     * 添加用户
     */
    @PostMapping
    public Result<Boolean> addUser(@RequestBody UserDTO userDTO) {
        return Result.success(userService.addUser(userDTO));
    }
    
    /**
     * 移动用户到新部门
     */
    @PutMapping("/move/{userId}/{deptId}")
    public Result<Boolean> moveUser(@PathVariable Integer userId, @PathVariable Integer deptId) {
        return Result.success(userService.moveUser(userId, deptId));
    }
}
</file>

<file path="hx-api/src/main/java/com/example/hx_api/controller/VipController.java">
package com.example.hx_api.controller;

import com.example.hx_api.service.VipService;
import com.example.hx_api.common.response.Result;
import com.example.hx_api.model.dto.VipDTO;
import com.example.hx_api.model.vo.VipVO;
// 引入 PageInfo 或自定义分页VO的包，如果service层使用特定分页组件
// import com.github.pagehelper.PageInfo; 
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map; // 用于包装分页结果

// 导入 Result 和 JSONObject
import com.example.hx_api.common.response.Result;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray; // 新增导入

/**
 * VIP会员接口
 */
@RestController
@RequestMapping("/api/vips")
@CrossOrigin // 允许跨域请求
public class VipController {
    @Autowired
    private VipService vipService;

    /**
     * 根据ID获取VIP信息
     */
    @GetMapping("/{id}")
    public Result<VipVO> getVipById(@PathVariable Integer id) {
        return Result.success(vipService.getVipById(id));
    }
    
    /**
     * 添加VIP
     */
    @PostMapping
    public Result<Boolean> addVip(@RequestBody VipDTO vipDTO) {
        return Result.success(vipService.addVip(vipDTO));
    }
    
    /**
     * 更新VIP信息
     */
    @PutMapping
    public Result<Void> updateVip(@RequestBody VipDTO vipDTO) {
        vipService.updateVip(vipDTO);
        return Result.success();
    }
    
    /**
     * 获取"念念不忘"会员列表 (分页)
     */
    @GetMapping("/never-forget/{userId}")
    public Result<Map<String, Object>> getNeverForgetVips(@PathVariable Integer userId,
                                                       @RequestParam(defaultValue = "1") int page,
                                                       @RequestParam(defaultValue = "10") int size,
                                                       @RequestParam(required = false) String sortBy,
                                                       @RequestParam(required = false) String sortDir) {
        // 假设 vipService.getNeverForgetVips 返回 Map<String, Object> 包含 "list" 和 "total"
        // 或者返回 PageInfo<VipVO> 等分页对象
        return Result.success(vipService.getNeverForgetVips(userId, page, size, sortBy, sortDir));
    }
    
    /**
     * 获取"好久不见"会员列表 (分页)
     */
    @GetMapping("/long-time-no-see/{userId}")
    public Result<Map<String, Object>> getLongTimeNoSeeVips(@PathVariable Integer userId,
                                                         @RequestParam(defaultValue = "1") int page,
                                                         @RequestParam(defaultValue = "10") int size,
                                                         @RequestParam(required = false) String sortBy,
                                                         @RequestParam(required = false) String sortDir) {
        // 假设 vipService.getLongTimeNoSeeVips 返回 Map<String, Object> 包含 "list" 和 "total"
        // 或者返回 PageInfo<VipVO> 等分页对象
        return Result.success(vipService.getLongTimeNoSeeVips(userId, page, size, sortBy, sortDir));
    }
    
    /**
     * 获取"念念不忘"会员数量
     */
    @GetMapping("/never-forget-count/{userId}")
    public Result<Integer> getNeverForgetVipsCount(@PathVariable Integer userId) {
        return Result.success(vipService.getNeverForgetVipsCount(userId));
    }
    
    /**
     * 获取"好久不见"会员数量
     */
    @GetMapping("/long-time-no-see-count/{userId}")
    public Result<Integer> getLongTimeNoSeeVipsCount(@PathVariable Integer userId) {
        return Result.success(vipService.getLongTimeNoSeeVipsCount(userId));
    }
    
    /**
     * 根据用户ID获取VIP列表
     */
    @GetMapping("/user/{userId}")
    public Result<List<VipVO>> getVipsByUserId(@PathVariable Integer userId) {
        return Result.success(vipService.getVipsByUserId(userId));
    }
    
    /**
     * 移动VIP到新的维护人
     */
    @PutMapping("/move/{vipId}/{userId}")
    public Result<Boolean> moveVip(@PathVariable Integer vipId, @PathVariable Integer userId) {
        return Result.success(vipService.moveVip(vipId, userId));
    }
    
    /**
     * 模糊查询VIP
     */
    @GetMapping("/search")
    public Result<List<VipVO>> findVipsByNameLike(@RequestParam String name) {
        return Result.success(vipService.findVipsByNameLike(name));
    }
    
    /**
     * 根据名称获取VIP列表
     */
    @GetMapping("/name/{name}")
    public Result<List<VipVO>> getVipsByName(@PathVariable String name) {
        return Result.success(vipService.getVipsByName(name));
    }
    
    /**
     * 删除VIP
     */
    @DeleteMapping("/{id}")
    public Result<Void> deleteVip(@PathVariable Integer id) {
        vipService.deleteVip(id);
        return Result.success();
    }
    
    /**
     * 获取所有VIP
     */
    @GetMapping
    public Result<List<VipVO>> getAllVips() {
        return Result.success(vipService.getAllVips());
    }
    
    /**
     * 获取所有VIP数量
     */
    @GetMapping("/count")
    public Result<Integer> getAllVipsCount() {
        return Result.success(vipService.getAllVipsCount());
    }

    /**
     * 根据手机号码查找会员列表 (调用外部API)
     *
     * @param phoneNumber 手机号码
     * @return 外部API返回的原始JSON数据，包装在Result中
     */
    @GetMapping("/by-phone")
    public Result<JSONObject> findVipsByPhoneNumber(@RequestParam String phoneNumber) {
        if (phoneNumber == null || phoneNumber.trim().isEmpty()) {
            return Result.fail(400, "手机号不能为空");
        }
        
        JSONObject result = vipService.findVipsByPhoneNumber(phoneNumber);
        
        // 外部API返回的STATUS为0表示成功
        if (result != null && result.getIntValue("STATUS") == 0) { 
            return Result.success(result);
        } else {
            // 从外部API错误响应中提取错误信息
            String errorMessage = "查找会员失败";
            int errorCode = 500;

            if (result != null) {
                errorCode = result.getIntValue("STATUS");
                
                // 尝试提取错误消息
                Object messageObj = result.get("MESSAGE");
                if (messageObj instanceof String) {
                    errorMessage = (String) messageObj;
                } else if (messageObj instanceof JSONArray) {
                    JSONArray messageArray = (JSONArray) messageObj;
                    if (!messageArray.isEmpty()) {
                        Object firstItem = messageArray.get(0);
                        if (firstItem instanceof JSONObject) {
                            JSONObject firstMessageObj = (JSONObject) firstItem;
                            if (firstMessageObj.containsKey("ERROR_INFO")) {
                                errorMessage = firstMessageObj.getString("ERROR_INFO");
                            } else if (firstMessageObj.containsKey("INFO")) {
                                errorMessage = firstMessageObj.getString("INFO");
                            }
                        }
                    }
                }
            }
            
            // 返回友好的错误结果
            return Result.fail(errorCode, errorMessage);
        }
    }

    /**
     * 根据会员ID获取VIP详细信息 (调用外部API)
     *
     * @param hyid 会员ID
     * @return 外部API返回的会员详情，包装在Result中
     */
    @GetMapping("/detail/{hyid}")
    public Result<JSONObject> getVipDetailByHyid(@PathVariable Integer hyid) {
        if (hyid == null) {
            return Result.fail(400, "会员ID不能为空");
        }
        
        JSONObject result = vipService.getVipDetailByHyid(hyid);
        
        // 外部API返回的STATUS为0表示成功
        if (result != null && result.getIntValue("STATUS") == 0) { 
            return Result.success(result);
        } else {
            // 从外部API错误响应中提取错误信息
            String errorMessage = "获取会员详情失败";
            int errorCode = 500;
            
            if (result != null) {
                errorCode = result.getIntValue("STATUS");
                
                // 尝试提取错误消息
                Object messageObj = result.get("MESSAGE");
                if (messageObj instanceof String) {
                    errorMessage = (String) messageObj;
                } else if (messageObj instanceof JSONArray) {
                    JSONArray messageArray = (JSONArray) messageObj;
                    if (!messageArray.isEmpty()) {
                        Object firstItem = messageArray.get(0);
                        if (firstItem instanceof JSONObject) {
                            JSONObject firstMessageObj = (JSONObject) firstItem;
                            if (firstMessageObj.containsKey("ERROR_INFO")) {
                                errorMessage = firstMessageObj.getString("ERROR_INFO");
                            } else if (firstMessageObj.containsKey("INFO")) {
                                errorMessage = firstMessageObj.getString("INFO");
                            }
                            }
                    }
                        }
                    }
            
            // 返回友好的错误结果
            return Result.fail(errorCode, errorMessage);
        }
    }
}
</file>

<file path="hx-api/src/main/java/com/example/hx_api/mapper/DeptMapper.java">
package com.example.hx_api.mapper;

import com.alibaba.fastjson.JSONObject; // 新增导入
import com.example.hx_api.model.entity.Dept;
import org.apache.ibatis.annotations.*;

import java.util.List;

/**
 * 部门Mapper接口
 */
@Mapper
public interface DeptMapper {
    /**
     * 根据ID获取部门
     */
    @Select("SELECT * FROM dept WHERE id = #{id}")
    Dept getDeptById(Integer id);

    /**
     * 获取所有部门
     */
    @Select("SELECT * FROM dept")
    List<Dept> getAllDepts();

    /**
     * 获取部门数量
     */
    @Select("SELECT COUNT(*) FROM user WHERE 所属部门id = #{deptId}")
    int getDeptCountById(Integer deptId);

    /**
     * 获取部门级联数据
     */
    @Select("SELECT * FROM dept")
    @Results({
            @Result(id = true, column = "id", property = "id"),
            @Result(column = "name", property = "name"),
            @Result(column = "type", property = "type"),
            @Result(property = "users", column = "id",
                    many = @Many(select = "com.example.hx_api.mapper.UserMapper.getUsersByDeptId"))
    })
    List<Dept> getCascadeDept();

    /**
     * 获取指定部门下各用户的VIP统计信息 ("念念不忘", "好久不见" 数量)
     * SQL逻辑同旧版 DeptDao.getDeptCountById
     * @param deptId 部门ID
     * @return List of JSONObject, each representing a user with 'name', '念念不忘', '好久不见' fields.
     */
    @Select("SELECT user.name, " +
            "(SELECT IF(COUNT(*) >= 200, 200, COUNT(*)) FROM vip WHERE 未消费天数 <= 180 AND 维护人id = user.id) AS `念念不忘`, " +
            "(SELECT COUNT(*) - (SELECT IF(COUNT(*) >= 200, 200, COUNT(*)) FROM vip WHERE 未消费天数 <= 180 AND 维护人id = user.id) FROM vip WHERE 维护人id = user.id) AS `好久不见` " +
            "FROM user WHERE 所属部门id = #{deptId}")
    List<JSONObject> getDeptUserVipStats(@Param("deptId") Integer deptId);
}
</file>

<file path="hx-api/src/main/java/com/example/hx_api/mapper/UserMapper.java">
package com.example.hx_api.mapper;

import com.example.hx_api.model.entity.User;
import org.apache.ibatis.annotations.*;

import java.util.List;

/**
 * 用户Mapper接口
 */
@Mapper
public interface UserMapper {
    /**
     * 根据ID获取用户
     */
    @Select("SELECT u.*, d.id as dept_id, d.name as dept_name, d.type as dept_type " +
            "FROM user u " +
            "LEFT JOIN dept d ON u.所属部门id = d.id " +
            "WHERE u.id = #{id}")
    @Results({
            @Result(id = true, column = "id", property = "id"),
            @Result(column = "name", property = "name"),
            @Result(column = "password", property = "password"),
            @Result(column = "dept_id", property = "deptId"),
            @Result(property = "dept", column = "dept_id",
                    one = @One(select = "com.example.hx_api.mapper.DeptMapper.getDeptById"))
    })
    User getUserById(Integer id);

    /**
     * 根据用户名获取用户
     */
    @Select("SELECT u.*, d.id as dept_id, d.name as dept_name, d.type as dept_type " +
            "FROM user u " +
            "LEFT JOIN dept d ON u.所属部门id = d.id " +
            "WHERE u.name = #{name}")
    @Results({
            @Result(id = true, column = "id", property = "id"),
            @Result(column = "name", property = "name"),
            @Result(column = "password", property = "password"),
            @Result(column = "dept_id", property = "deptId"),
            @Result(property = "dept", column = "dept_id",
                    one = @One(select = "com.example.hx_api.mapper.DeptMapper.getDeptById"))
    })
    User getUserByName(String name);

    /**
     * 根据部门ID获取用户列表
     */
    @Select("SELECT * FROM user WHERE 所属部门id = #{deptId}")
    List<User> getUsersByDeptId(Integer deptId);

    /**
     * 添加用户
     */
    @Insert("INSERT INTO user(name, password, 所属部门id) VALUES(#{name}, #{password}, #{deptId})")
    @Options(useGeneratedKeys = true, keyProperty = "id")
    int addUser(User user);

    /**
     * 修改用户
     */
    @Update("UPDATE user SET name=#{name}, password=#{password}, 所属部门id=#{deptId} WHERE id=#{id}")
    int updateUser(User user);

    /**
     * 移动用户到新部门
     */
    @Update("UPDATE user SET 所属部门id=#{deptId} WHERE id=#{userId}")
    int moveUser(@Param("userId") Integer userId, @Param("deptId") Integer deptId);

    /**
     * 根据用户名和密码获取用户
     */
    @Select("SELECT u.*, d.id as dept_id, d.name as dept_name, d.type as dept_type " +
            "FROM user u " +
            "LEFT JOIN dept d ON u.所属部门id = d.id " +
            "WHERE u.name = #{name} AND u.password = #{password}")
    @Results({
            @Result(id = true, column = "id", property = "id"),
            @Result(column = "name", property = "name"),
            @Result(column = "password", property = "password"),
            @Result(column = "dept_id", property = "deptId"),
            @Result(property = "dept", column = "dept_id",
                    one = @One(select = "com.example.hx_api.mapper.DeptMapper.getDeptById"))
    })
    User login(@Param("name") String name, @Param("password") String password);
}
</file>

<file path="hx-api/src/main/java/com/example/hx_api/mapper/VipMapper.java">
package com.example.hx_api.mapper;

import com.example.hx_api.model.entity.Vip;
import org.apache.ibatis.annotations.*;

import java.util.List;

/**
 * VIP会员数据访问接口
 */
@Mapper
public interface VipMapper {
    /**
     * 添加VIP
     */
    @Insert("insert into vip values (null,#{hyid},#{name},#{age},#{points},#{phone},#{nonConsumptionDays},#{address},#{maintainerId},curdate(),#{r},#{f},#{m})")
    void insertVip(Vip vip);
    
    /**
     * 根据ID获取VIP
     */
    @Select("select * from vip where id=#{id}")
    @Results({
            @Result(column = "积分", property = "points"),
            @Result(column = "未消费天数", property = "nonConsumptionDays"),
            @Result(column = "adress", property = "address"),
            @Result(column = "维护人id", property = "maintainerId"),
            @Result(column = "create_time", property = "createTime"),
            @Result(column = "维护人id", property = "maintainer",
                    one = @One(select = "com.example.hx_api.mapper.UserMapper.getUserById"))
    })
    Vip getVipById(Integer id);
    
    /**
     * 根据会员ID获取VIP列表
     */
    @Select("select * from vip where hyid=#{hyid}")
    @Results({
            @Result(column = "积分", property = "points"),
            @Result(column = "未消费天数", property = "nonConsumptionDays"),
            @Result(column = "adress", property = "address"),
            @Result(column = "维护人id", property = "maintainerId"),
            @Result(column = "create_time", property = "createTime"),
            @Result(column = "维护人id", property = "maintainer",
                    one = @One(select = "com.example.hx_api.mapper.UserMapper.getUserById"))
    })
    List<Vip> getVipsByHyid(Integer hyid);
    
    /**
     * 更新VIP信息
     */
    @Update("update vip set name=#{name}, age=#{age}, 积分=#{points}, phone=#{phone}, 未消费天数=#{nonConsumptionDays}, adress=#{address}, R=#{r}, F=#{f}, M=#{m} where hyid=#{hyid}")
    void updateVip(Vip vip);
    
    /**
     * 获取"念念不忘"会员列表
     * 规则: 未消费天数 <= 180，按未消费天数升序取前200，再按M值降序、未消费天数降序排序。PageHelper对此结果分页。
     */
    @Select("SELECT * FROM (SELECT * FROM vip WHERE 未消费天数 <= 180 AND 维护人id =#{userId} ORDER BY 未消费天数 ASC LIMIT 200) AS subquery ORDER BY M DESC, 未消费天数 DESC")
    @Results({
            @Result(column = "积分", property = "points"),
            @Result(column = "未消费天数", property = "nonConsumptionDays"),
            @Result(column = "adress", property = "address"),
            @Result(column = "维护人id", property = "maintainerId"),
            @Result(column = "create_time", property = "createTime"),
            @Result(column = "维护人id", property = "maintainer",
                    one = @One(select = "com.example.hx_api.mapper.UserMapper.getUserById"))
    })
    List<Vip> getNeverForgetVips(Integer userId);
    
    /**
     * 获取"好久不见"会员列表
     * 规则: 排除掉"念念不忘"的会员（即上述按规则获取的前200名），其余按M值降序、未消费天数降序排序。PageHelper对此结果分页。
     */
    @Select("SELECT * FROM vip WHERE 维护人id = #{userId} AND id NOT IN (SELECT id FROM (SELECT id FROM vip WHERE 未消费天数 <= 180 AND 维护人id = #{userId} ORDER BY 未消费天数 ASC LIMIT 200) AS never_forget_ids_subquery) ORDER BY M DESC, 未消费天数 DESC")
    @Results({
            @Result(column = "积分", property = "points"),
            @Result(column = "未消费天数", property = "nonConsumptionDays"),
            @Result(column = "adress", property = "address"),
            @Result(column = "维护人id", property = "maintainerId"),
            @Result(column = "create_time", property = "createTime"),
            @Result(column = "维护人id", property = "maintainer",
                    one = @One(select = "com.example.hx_api.mapper.UserMapper.getUserById"))
    })
    List<Vip> getLongTimeNoSeeVips(Integer userId);
    
    /**
     * 获取"念念不忘"会员数量
     * (计算的是符合条件且限定在前200名内的数量)
     */
    @Select("SELECT COUNT(*) FROM (SELECT id FROM vip WHERE 未消费天数 <= 180 AND 维护人id = #{userId} ORDER BY 未消费天数 ASC LIMIT 200) AS never_forget_count_subquery")
    int getNeverForgetVipsCount(Integer userId);
    
    /**
     * 获取"好久不见"会员数量
     * (计算的是排除了"念念不忘"会员后的数量)
     */
    @Select("SELECT COUNT(*) FROM vip WHERE 维护人id = #{userId} AND id NOT IN (SELECT id FROM (SELECT id FROM vip WHERE 未消费天数 <= 180 AND 维护人id = #{userId} ORDER BY 未消费天数 ASC LIMIT 200) AS never_forget_ids_for_count_subquery)")
    int getLongTimeNoSeeVipsCount(Integer userId);
    
    /**
     * 根据用户ID获取VIP列表
     */
    @Select("select * from vip where 维护人id=#{userId} order by m desc,未消费天数 desc")
    @Results({
            @Result(column = "积分", property = "points"),
            @Result(column = "未消费天数", property = "nonConsumptionDays"),
            @Result(column = "adress", property = "address"),
            @Result(column = "维护人id", property = "maintainerId"),
            @Result(column = "create_time", property = "createTime"),
            @Result(column = "维护人id", property = "maintainer",
                    one = @One(select = "com.example.hx_api.mapper.UserMapper.getUserById"))
    })
    List<Vip> getVipsByUserId(Integer userId);
    
    /**
     * 检查VIP是否重复
     */
    @Select("select count(*) from vip where 维护人id=#{userId} and hyid=#{hyid}")
    int checkVipExists(Integer userId, Integer hyid);
    
    /**
     * 更新VIP的维护人
     */
    @Update("update vip set 维护人id=#{userId},create_time=curdate() where id=#{id}")
    void updateVipMaintainer(Integer userId, Integer id);
    
    /**
     * 根据名称获取VIP列表
     */
    @Select("select * from vip where name=#{name}")
    @Results({
            @Result(column = "积分", property = "points"),
            @Result(column = "未消费天数", property = "nonConsumptionDays"),
            @Result(column = "adress", property = "address"),
            @Result(column = "维护人id", property = "maintainerId"),
            @Result(column = "create_time", property = "createTime"),
            @Result(column = "维护人id", property = "maintainer",
                    one = @One(select = "com.example.hx_api.mapper.UserMapper.getUserById"))
    })
    List<Vip> getVipsByName(String name);
    
    /**
     * 模糊查询VIP
     */
    @Select("select name from vip where name like #{name} group by name")
    List<Vip> findVipsByNameLike(String name);
    
    /**
     * 删除VIP
     */
    @Delete("delete from vip where id=#{id}")
    void deleteVip(Integer id);
    
    /**
     * 获取所有VIP
     */
    @Select("select * from vip")
    @Results({
            @Result(column = "积分", property = "points"),
            @Result(column = "未消费天数", property = "nonConsumptionDays"),
            @Result(column = "adress", property = "address"),
            @Result(column = "维护人id", property = "maintainerId"),
            @Result(column = "create_time", property = "createTime"),
            @Result(column = "维护人id", property = "maintainer",
                    one = @One(select = "com.example.hx_api.mapper.UserMapper.getUserById"))
    })
    List<Vip> getAllVips();
    
    /**
     * 获取所有VIP数量
     */
    @Select("select count(*) from vip")
    int getAllVipsCount();
}
</file>

<file path="hx-api/src/main/java/com/example/hx_api/model/dto/UserDTO.java">
package com.example.hx_api.model.dto;

import lombok.Data;

/**
 * 用户数据传输对象
 */
@Data
public class UserDTO {
    /**
     * 用户ID
     */
    private Integer id;
    
    /**
     * 用户名
     */
    private String name;
    
    /**
     * 密码
     */
    private String password;
    
    /**
     * 所属部门ID
     */
    private Integer deptId;
    
    /**
     * 所属部门对象
     */
    private Object 所属部门;
}
</file>

<file path="hx-api/src/main/java/com/example/hx_api/model/dto/VipDTO.java">
package com.example.hx_api.model.dto;

import lombok.Data;

/**
 * VIP数据传输对象
 */
@Data
public class VipDTO {
    /**
     * 主键ID
     */
    private Integer id;
    
    /**
     * 会员ID
     */
    private Integer hyid;
    
    /**
     * 会员姓名
     */
    private String name;
    
    /**
     * 年龄
     */
    private String age;
    
    /**
     * 积分
     */
    private Integer points;
    
    /**
     * 手机号
     */
    private String phone;
    
    /**
     * 未消费天数
     */
    private Integer nonConsumptionDays;
    
    /**
     * 地址
     */
    private String address;
    
    /**
     * 维护人ID
     */
    private Integer maintainerId;
    
    /**
     * 复购周期
     */
    private Integer r;
    
    /**
     * 消费频率
     */
    private Integer f;
    
    /**
     * 消费金额
     */
    private Integer m;
}
</file>

<file path="hx-api/src/main/java/com/example/hx_api/model/entity/Dept.java">
package com.example.hx_api.model.entity;

import lombok.Data;

import java.util.ArrayList;
import java.util.List;

/**
 * 部门实体类
 */
@Data
public class Dept {
    /**
     * 部门ID
     */
    private Integer id;
    
    /**
     * 部门名称
     */
    private String name;
    
    /**
     * 部门类型
     */
    private String type;
    
    /**
     * 部门用户列表
     */
    private List<User> users = new ArrayList<>();
}
</file>

<file path="hx-api/src/main/java/com/example/hx_api/model/entity/User.java">
package com.example.hx_api.model.entity;

import lombok.Data;

/**
 * 用户实体类
 */
@Data
public class User {
    /**
     * 用户ID
     */
    private Integer id;
    
    /**
     * 用户名
     */
    private String name;
    
    /**
     * 密码
     */
    private String password;
    
    /**
     * 所属部门
     */
    private Dept dept;
    
    /**
     * 所属部门ID
     */
    private Integer 所属部门id;
    
    /**
     * 临时字段，与Java命名规范一致，用于mybatis映射
     */
    private Integer deptId;
}
</file>

<file path="hx-api/src/main/java/com/example/hx_api/model/entity/Vip.java">
package com.example.hx_api.model.entity;

import lombok.Data;
import java.util.Date;

/**
 * VIP会员实体类
 */
@Data
public class Vip {
    /**
     * 主键ID
     */
    private Integer id;
    
    /**
     * 会员ID
     */
    private Integer hyid;
    
    /**
     * 会员姓名
     */
    private String name;
    
    /**
     * 年龄
     */
    private String age;
    
    /**
     * 积分
     */
    private Integer points;
    
    /**
     * 手机号
     */
    private String phone;
    
    /**
     * 未消费天数
     */
    private Integer nonConsumptionDays;
    
    /**
     * 地址
     */
    private String address;
    
    /**
     * 维护人ID
     */
    private Integer maintainerId;
    
    /**
     * 维护人
     */
    private User maintainer;
    
    /**
     * 创建时间
     */
    private Date createTime;
    
    /**
     * 复购周期
     */
    private Integer r;
    
    /**
     * 消费频率
     */
    private Integer f;
    
    /**
     * 消费金额
     */
    private Integer m;
}
</file>

<file path="hx-api/src/main/java/com/example/hx_api/model/vo/DeptVO.java">
package com.example.hx_api.model.vo;

import lombok.Data;
import java.util.List;

/**
 * 部门信息视图对象 (可能包含用户列表)
 */
@Data
public class DeptVO {
    private Integer id;
    private String name;
    private String type;
    private List<UserBasicVO> users; // 用于级联查询时显示部门下的用户
}
</file>

<file path="hx-api/src/main/java/com/example/hx_api/model/vo/UserBasicVO.java">
package com.example.hx_api.model.vo;

import lombok.Data;

/**
 * 用户基本信息视图对象
 */
@Data
public class UserBasicVO {
    private Integer id;
    private String name;
}
</file>

<file path="hx-api/src/main/java/com/example/hx_api/model/vo/UserVO.java">
package com.example.hx_api.model.vo;

import lombok.Data;

/**
 * 用户视图对象
 */
@Data
public class UserVO {
    /**
     * 用户ID
     */
    private Integer id;
    
    /**
     * 用户名
     */
    private String name;
    
    /**
     * 部门名称
     */
    private String deptName;
    
    /**
     * 部门类型
     */
    private String deptType;
}
</file>

<file path="hx-api/src/main/java/com/example/hx_api/model/vo/VipVO.java">
package com.example.hx_api.model.vo;

import lombok.Data;
import java.util.Date;

/**
 * VIP视图对象
 */
@Data
public class VipVO {
    /**
     * 主键ID
     */
    private Integer id;
    
    /**
     * 会员ID
     */
    private Integer hyid;
    
    /**
     * 会员姓名
     */
    private String name;
    
    /**
     * 年龄
     */
    private String age;
    
    /**
     * 积分
     */
    private Integer points;
    
    /**
     * 手机号
     */
    private String phone;
    
    /**
     * 未消费天数
     */
    private Integer nonConsumptionDays;
    
    /**
     * 地址
     */
    private String address;
    
    /**
     * 维护人信息
     */
    private UserVO maintainer;
    
    /**
     * 创建时间
     */
    private Date createTime;
    
    /**
     * 复购周期
     */
    private Integer r;
    
    /**
     * 消费频率
     */
    private Integer f;
    
    /**
     * 消费金额
     */
    private Integer m;
}
</file>

<file path="hx-api/src/main/java/com/example/hx_api/service/DeptService.java">
package com.example.hx_api.service;

import com.alibaba.fastjson.JSONObject;
import com.example.hx_api.model.vo.DeptVO;
import java.util.List;

/**
 * 部门服务接口
 */
public interface DeptService {

    /**
     * 获取所有部门列表 (不含用户信息)
     * @return 部门视图对象列表
     */
    List<DeptVO> getAllDepts();

    /**
     * 获取级联部门列表 (包含部门下的用户基本信息)
     * @return 部门视图对象列表 (包含用户)
     */
    List<DeptVO> getCascadeDepts();

    /**
     * 根据部门ID获取部门统计信息
     * (例如：部门下各用户的"念念不忘"和"好久不见"会员数量)
     * @param deptId 部门ID
     * @return 统计信息列表，每个元素是一个JSONObject，代表一个用户的统计
     */
    List<JSONObject> getDeptStatsById(Integer deptId);
}
</file>

<file path="hx-api/src/main/java/com/example/hx_api/service/impl/DeptServiceImpl.java">
package com.example.hx_api.service.impl;

import com.alibaba.fastjson.JSONObject;
import com.example.hx_api.mapper.DeptMapper;
import com.example.hx_api.model.entity.Dept;
import com.example.hx_api.model.entity.User;
import com.example.hx_api.model.vo.DeptVO;
import com.example.hx_api.model.vo.UserBasicVO;
import com.example.hx_api.service.DeptService;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class DeptServiceImpl implements DeptService {

    @Autowired
    private DeptMapper deptMapper;

    @Override
    public List<DeptVO> getAllDepts() {
        List<Dept> depts = deptMapper.getAllDepts();
        return depts.stream().map(dept -> {
            DeptVO deptVO = new DeptVO();
            BeanUtils.copyProperties(dept, deptVO);
            // users 列表在此方法中不填充
            return deptVO;
        }).collect(Collectors.toList());
    }

    @Override
    public List<DeptVO> getCascadeDepts() {
        List<Dept> deptsWithUsers = deptMapper.getCascadeDept(); // 这个方法应该返回 Dept 包含 List<User>
        return deptsWithUsers.stream().map(dept -> {
            DeptVO deptVO = new DeptVO();
            BeanUtils.copyProperties(dept, deptVO, "users"); // 复制基本属性

            if (dept.getUsers() != null) {
                List<UserBasicVO> userBasicVOs = dept.getUsers().stream().map(user -> {
                    UserBasicVO userBasicVO = new UserBasicVO();
                    userBasicVO.setId(user.getId());
                    userBasicVO.setName(user.getName());
                    return userBasicVO;
                }).collect(Collectors.toList());
                deptVO.setUsers(userBasicVOs);
            } else {
                deptVO.setUsers(new ArrayList<>()); // 确保 users 列表不为 null
            }
            return deptVO;
        }).collect(Collectors.toList());
    }

    @Override
    public List<JSONObject> getDeptStatsById(Integer deptId) {
        // 调用DeptMapper中新添加的方法
        return deptMapper.getDeptUserVipStats(deptId);
    }
}
</file>

<file path="hx-api/src/main/java/com/example/hx_api/service/impl/UserServiceImpl.java">
package com.example.hx_api.service.impl;

import com.example.hx_api.mapper.UserMapper;
import com.example.hx_api.model.dto.UserDTO;
import com.example.hx_api.model.entity.User;
import com.example.hx_api.model.vo.UserVO;
import com.example.hx_api.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * 用户服务实现类
 */
@Service
public class UserServiceImpl implements UserService {
    @Autowired
    private UserMapper userMapper;

    @Override
    public UserVO login(UserDTO userDTO) {
        // 根据用户名和密码查询用户
        User user = userMapper.login(userDTO.getName(), userDTO.getPassword());
        // 如果用户不存在，返回null
        if (user == null) {
            return null;
        }
        // 转换为VO对象
        return convertToVO(user);
    }

    @Override
    public UserVO getUserInfo(Integer id) {
        User user = userMapper.getUserById(id);
        if (user == null) {
            return null;
        }
        return convertToVO(user);
    }

    @Override
    public void updateUser(UserDTO userDTO) {
        User user = convertToEntity(userDTO);
        userMapper.updateUser(user);
    }

    @Override
    public boolean addUser(UserDTO userDTO) {
        User existingUser = userMapper.getUserByName(userDTO.getName());
        if (existingUser != null) {
            return false;
        }
        User user = convertToEntity(userDTO);
        return userMapper.addUser(user) > 0;
    }

    @Override
    public boolean moveUser(Integer userId, Integer deptId) {
        return userMapper.moveUser(userId, deptId) > 0;
    }

    /**
     * 将实体对象转换为视图对象
     */
    private UserVO convertToVO(User user) {
        if (user == null) {
            return null;
        }
        UserVO vo = new UserVO();
        vo.setId(user.getId());
        vo.setName(user.getName());
        
        if (user.getDept() != null) {
            vo.setDeptName(user.getDept().getName());
            vo.setDeptType(user.getDept().getType());
        }
        
        return vo;
    }

    /**
     * 将DTO对象转换为实体对象
     */
    private User convertToEntity(UserDTO dto) {
        if (dto == null) {
            return null;
        }
        User user = new User();
        user.setId(dto.getId());
        user.setName(dto.getName());
        user.setPassword(dto.getPassword());
        
        // 设置所属部门ID
        user.set所属部门id(dto.getDeptId());
        
        // 同时设置deptId字段，确保兼容性
        user.setDeptId(dto.getDeptId());
        
        return user;
    }
}
</file>

<file path="hx-api/src/main/java/com/example/hx_api/service/impl/VipServiceImpl.java">
package com.example.hx_api.service.impl;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.example.hx_api.service.VipService;
import com.example.hx_api.client.HxApiClient;
import com.example.hx_api.client.model.request.CustomerInfoRequest;
import com.example.hx_api.client.model.request.FindVipByPhoneRequest;
import com.example.hx_api.client.model.request.RfmRequest;
import com.example.hx_api.client.model.response.ApiResponse;
import com.example.hx_api.common.exception.BusinessException;
import com.example.hx_api.mapper.VipMapper;
import com.example.hx_api.mapper.UserMapper;
import com.example.hx_api.model.dto.VipDTO;
import com.example.hx_api.model.entity.User;
import com.example.hx_api.model.entity.Vip;
import com.example.hx_api.model.vo.UserVO;
import com.example.hx_api.model.vo.VipVO;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

// 导入分页相关
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import java.util.Map;
import java.util.HashMap;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

/**
 * VIP会员服务实现类
 */
@Slf4j
@Service
public class VipServiceImpl implements VipService {

    // 辅助方法：将前端的排序属性名映射到数据库列名
    private String mapSortPropertyToColumn(String propertyName) {
        if (propertyName == null) {
            return null;
        }
        switch (propertyName) {
            case "points":
                return "积分"; // 根据VipMapper中的@Result
            case "nonConsumptionDays":
                return "未消费天数"; // 根据VipMapper中的@Result
            case "r":
                return "R"; // 假设数据库列名与属性名一致
            case "f":
                return "F"; // 假设数据库列名与属性名一致
            case "m":
                return "M"; // 假设数据库列名与属性名一致
            case "address":
                return "adress"; // 根据VipMapper中的@Result
            case "createTime":
                return "create_time"; // 根据VipMapper中的@Result
            // 如果前端可能传递其他可排序字段，在此处添加映射
            default:
                // 对于其他情况，可以返回属性名本身（如果列名和属性名一致或有自动映射）
                // 或者记录一个警告/错误，因为这是一个未知的排序字段
                log.warn("未知的排序属性: {}", propertyName);
                return propertyName; // 或者返回null/抛出异常，取决于严格性要求
        }
    }
    
    @Autowired
    private VipMapper vipMapper;

    @Autowired
    private UserMapper userMapper; // 注入 UserMapper

    @Autowired
    private HxApiClient hxApiClient;
    
    // 假设有一个UserContext类来获取当前用户信息，实际项目中应通过Spring Security等机制获取
    // 例如:
    // class UserContext {
    //     public static UserVO getCurrentUser() {
    //         // 实现获取当前登录用户逻辑
    //         // UserVO应包含id, role (e.g., "ADMIN", "STAFF"), deptType
    //         UserVO currentUser = new UserVO();
    //         // currentUser.setId(1); // 示例用户ID
    //         // currentUser.setRole("STAFF"); // 示例角色
    //         // currentUser.setDeptType("TYPE_A"); // 示例部门类型
    //         // currentUser.setDeptId(10); // 示例部门ID
    //         return currentUser; // 返回当前用户信息，如果未登录则返回null或抛异常
    //     }
    // }

    @Override
    public VipVO getVipById(Integer id) {
        Vip vip = vipMapper.getVipById(id);
        if (vip == null) {
            return null;
        }
        return convertToVO(vip);
    }
    
    @Override
    public List<VipVO> getVipsByHyid(Integer hyid) {
        List<Vip> vips = vipMapper.getVipsByHyid(hyid);
        return vips.stream().map(this::convertToVO).collect(Collectors.toList());
    }
    
    @Override
    @Transactional(rollbackFor = Exception.class)
    public boolean addVip(VipDTO vipDTO) {
        // 参数校验
        if (vipDTO == null || vipDTO.getHyid() == null || vipDTO.getMaintainerId() == null) {
            log.error("添加VIP失败：参数缺失, vipDTO={}", vipDTO);
            return false;
        }

        // 校验：目标维护人是否已经维护了这个HYID
        int count = vipMapper.checkVipExists(vipDTO.getMaintainerId(), vipDTO.getHyid());
        if (count > 0) {
            log.warn("添加VIP失败：会员ID {} 已由维护人ID {} 维护。", vipDTO.getHyid(), vipDTO.getMaintainerId());
            return false; // 已存在，不允许添加
        }

        // 获取维护人信息，判断其部门信息
        User maintainer = userMapper.getUserById(vipDTO.getMaintainerId());
        if (maintainer == null) {
            log.error("添加VIP失败：维护人不存在, maintainerId={}", vipDTO.getMaintainerId());
            return false;
        }
        
        // 获取部门类型
        String currentUserDeptType = null;
        if (maintainer.getDept() != null) {
            currentUserDeptType = maintainer.getDept().getType();
        }

        // 校验：是否同一部门类型的其他员工已维护此HYID
        // 这里简化为对所有用户都进行这一校验，不再区分ADMIN和STAFF
        List<Vip> existingVipsWithSameHyid = vipMapper.getVipsByHyid(vipDTO.getHyid());
        for (Vip existingVip : existingVipsWithSameHyid) {
            if (existingVip.getMaintainerId() != null && !existingVip.getMaintainerId().equals(vipDTO.getMaintainerId())) {
                User existingMaintainer = userMapper.getUserById(existingVip.getMaintainerId());
                if (existingMaintainer != null && existingMaintainer.getDept() != null &&
                    currentUserDeptType != null && currentUserDeptType.equals(existingMaintainer.getDept().getType())) {
                    log.warn("添加VIP失败：会员ID {} 已由同部门类型下的其他维护人 {} (ID:{}) 维护。",
                            vipDTO.getHyid(), existingMaintainer.getName(), existingMaintainer.getId());
                    return false; // 同部门类型下其他员工已维护此会员
                }
            }
        }

        // 数据转换与保存
        Vip vip = new Vip();
        BeanUtils.copyProperties(vipDTO, vip);
        
        // 设置创建时间，如果实体没有自动设置
        if (vip.getCreateTime() == null) {
            vip.setCreateTime(new java.util.Date());
        }

        // 保存到数据库
        vipMapper.insertVip(vip);
        log.info("VIP添加成功: hyid={}, name={}, maintainerId={}", vip.getHyid(), vip.getName(), vip.getMaintainerId());
        return true;
    }
    
    @Override
    @Transactional(rollbackFor = Exception.class)
    public void updateVip(VipDTO vipDTO) {
        Vip vip = new Vip();
        BeanUtils.copyProperties(vipDTO, vip);
        vipMapper.updateVip(vip);
    }
    
    @Override
    public Map<String, Object> getNeverForgetVips(Integer userId, int page, int size, String sortBy, String sortDir) {
        if (sortBy != null && !sortBy.isEmpty() && sortDir != null && !sortDir.isEmpty()) {
            String columnName = mapSortPropertyToColumn(sortBy);
            if (columnName != null) { // 确保转换后的列名有效
                String orderDirection = "asc".equalsIgnoreCase(sortDir) ? "ASC" : "DESC";
                PageHelper.orderBy(columnName + " " + orderDirection);
            }
        }
        PageHelper.startPage(page, size);
        List<Vip> vips = vipMapper.getNeverForgetVips(userId);
        PageInfo<Vip> pageInfo = new PageInfo<>(vips);
        List<VipVO> vipVOs = pageInfo.getList().stream().map(this::convertToVO).collect(Collectors.toList());
        
        Map<String, Object> result = new HashMap<>();
        result.put("list", vipVOs);
        result.put("total", pageInfo.getTotal());
        return result;
    }
    
    @Override
    public Map<String, Object> getLongTimeNoSeeVips(Integer userId, int page, int size, String sortBy, String sortDir) {
        if (sortBy != null && !sortBy.isEmpty() && sortDir != null && !sortDir.isEmpty()) {
            String columnName = mapSortPropertyToColumn(sortBy);
            if (columnName != null) { // 确保转换后的列名有效
                String orderDirection = "asc".equalsIgnoreCase(sortDir) ? "ASC" : "DESC";
                PageHelper.orderBy(columnName + " " + orderDirection);
            }
        }
        PageHelper.startPage(page, size);
        List<Vip> vips = vipMapper.getLongTimeNoSeeVips(userId);
        PageInfo<Vip> pageInfo = new PageInfo<>(vips);
        List<VipVO> vipVOs = pageInfo.getList().stream().map(this::convertToVO).collect(Collectors.toList());
        
        Map<String, Object> result = new HashMap<>();
        result.put("list", vipVOs);
        result.put("total", pageInfo.getTotal());
        return result;
    }
    
    @Override
    public int getNeverForgetVipsCount(Integer userId) {
        return vipMapper.getNeverForgetVipsCount(userId);
    }
    
    @Override
    public int getLongTimeNoSeeVipsCount(Integer userId) {
        return vipMapper.getLongTimeNoSeeVipsCount(userId);
    }
    
    @Override
    public List<VipVO> getVipsByUserId(Integer userId) {
        List<Vip> vips = vipMapper.getVipsByUserId(userId);
        return vips.stream().map(this::convertToVO).collect(Collectors.toList());
    }
    
    @Override
    @Transactional(rollbackFor = Exception.class)
    public boolean moveVip(Integer vipId, Integer userId) {
        Vip vip = vipMapper.getVipById(vipId);
        if (vip == null) {
            throw new BusinessException("VIP不存在");
        }
        
        int count = vipMapper.checkVipExists(userId, vip.getHyid());
        if (count > 0) {
            return false;
        }
        
        vipMapper.updateVipMaintainer(userId, vipId);
        return true;
    }
    
    @Override
    public List<VipVO> findVipsByNameLike(String name) {
        if (name == null || name.trim().isEmpty()) {
            return new ArrayList<>();
        }
        
        // 构建模糊查询条件
        StringBuilder likeName = new StringBuilder("%");
        for (char c : name.trim().toCharArray()) {
            likeName.append(c).append("%");
        }
        
        List<Vip> vips = vipMapper.findVipsByNameLike(likeName.toString());
        return vips.stream().map(this::convertToVO).collect(Collectors.toList());
    }
    
    @Override
    public List<VipVO> getVipsByName(String name) {
        List<Vip> vips = vipMapper.getVipsByName(name.trim());
        return vips.stream().map(this::convertToVO).collect(Collectors.toList());
    }
    
    @Override
    @Transactional(rollbackFor = Exception.class)
    public void deleteVip(Integer id) {
        vipMapper.deleteVip(id);
    }
    
    @Override
    public List<VipVO> getAllVips() {
        List<Vip> vips = vipMapper.getAllVips();
        return vips.stream().map(this::convertToVO).collect(Collectors.toList());
    }
    
    @Override
    public int getAllVipsCount() {
        return vipMapper.getAllVipsCount();
    }
    
    @Override
    @Transactional(rollbackFor = Exception.class)
    public void updateAllVipsRfmInfo() {
        List<Vip> vips = vipMapper.getAllVips();
        log.info("开始更新VIP RFM信息，总数: {}", vips.size());
        
        for (Vip vip : vips) {
            try {
                // 更新会员详情信息
                JSONObject customerInfoResponse = hxApiClient.getCustomerInfo(new CustomerInfoRequest(vip.getHyid()));
                if (customerInfoResponse.getIntValue("STATUS") == 0) { // 成功状态码为0
                    JSONObject message = customerInfoResponse.getJSONObject("MESSAGE");
                    if (message != null) {
                        JSONArray vipInfo = message.getJSONArray("VIPINFO");
                        updateVipInfoFromResponse(vip, vipInfo);
                    }
                }
                
                // 更新RFM信息
                JSONObject rfmResponse = hxApiClient.getRfmInfo(new RfmRequest(vip.getHyid()));
                if (rfmResponse.getIntValue("STATUS") == 0) { // 成功状态码为0
                    JSONObject message = rfmResponse.getJSONObject("MESSAGE");
                    if (message != null && !message.isEmpty()) {
                        JSONObject rfmInfo = message.getJSONObject(String.valueOf(0));
                        updateRfmInfoFromResponse(vip, rfmInfo);
                    }
                }
                
                // 保存更新后的会员信息
                vipMapper.updateVip(vip);
                log.debug("更新VIP成功, hyid: {}, name: {}", vip.getHyid(), vip.getName());
            } catch (Exception e) {
                log.error("更新VIP信息失败, hyid: {}, name: {}, error: {}", vip.getHyid(), vip.getName(), e.getMessage());
            }
        }
        
        log.info("VIP RFM信息更新完成");
    }
    
    /**
     * 从会员详情响应中更新会员信息
     */
    private void updateVipInfoFromResponse(Vip vip, JSONArray vipInfo) {
        if (vipInfo == null) {
            return;
        }
        
        for (int i = 0; i < vipInfo.size(); i++) {
            JSONObject info = vipInfo.getJSONObject(i);
            String field = info.getString("FIELD");
            
            if ("D_LASTBUY".equals(field)) {
                vip.setNonConsumptionDays(info.getIntValue("VALUE"));
            } else if ("N_ALLVALUE".equals(field)) {
                vip.setPoints(info.getIntValue("VALUE"));
            }
        }
    }
    
    /**
     * 从RFM响应中更新会员RFM信息
     */
    private void updateRfmInfoFromResponse(Vip vip, JSONObject rfmInfo) {
        if (rfmInfo == null) {
            return;
        }
        
        vip.setR(rfmInfo.getIntValue("rvalue"));
        vip.setF(rfmInfo.getIntValue("fvalue"));
        vip.setM(rfmInfo.getIntValue("mvalue"));
    }
    
    /**
     * 转换实体为视图对象
     */
    private VipVO convertToVO(Vip vip) {
        if (vip == null) {
            return null;
        }
        
        VipVO vo = new VipVO();
        BeanUtils.copyProperties(vip, vo);
        
        if (vip.getMaintainer() != null) {
            UserVO userVO = new UserVO();
            userVO.setId(vip.getMaintainer().getId());
            userVO.setName(vip.getMaintainer().getName());
            
            if (vip.getMaintainer().getDept() != null) {
                userVO.setDeptName(vip.getMaintainer().getDept().getName());
                userVO.setDeptType(vip.getMaintainer().getDept().getType());
            }
            
            vo.setMaintainer(userVO);
        }
        
        return vo;
    }

    @Override
    public JSONObject findVipsByPhoneNumber(String phoneNumber) {
        if (phoneNumber == null || phoneNumber.trim().isEmpty()) {
            log.warn("通过手机号查找会员失败：手机号码为空");
            // 或者可以返回一个表示错误的JSONObject
            return new JSONObject().fluentPut("STATUS", -1).fluentPut("MESSAGE", "手机号码不能为空");
        }
        FindVipByPhoneRequest request = new FindVipByPhoneRequest(phoneNumber);
        log.info("开始通过手机号查找会员，请求参数: {}", request);
        try {
            JSONObject response = hxApiClient.sendRequest(request);
            log.info("通过手机号查找会员成功，响应: {}", response);
            return response;
        } catch (Exception e) {
            log.error("通过手机号查找会员失败，手机号: {}, 错误: {}", phoneNumber, e.getMessage(), e);
            // 返回一个表示错误的JSONObject
            JSONObject errorResponse = new JSONObject();
            errorResponse.put("STATUS", -1); // 使用与外部API类似的错误状态码
            // 通常外部API的错误信息在MESSAGE字段，但这里是客户端调用出错
            JSONArray messageArray = new JSONArray();
            messageArray.add(new JSONObject().fluentPut("ERROR_INFO", "调用外部服务查找会员失败: " + e.getMessage()));
            errorResponse.put("MESSAGE", messageArray);
            return errorResponse;
        }
    }

    @Override
    public JSONObject getVipDetailByHyid(Integer hyid) {
        if (hyid == null) {
            log.warn("获取会员详情失败：会员ID为空");
            return new JSONObject().fluentPut("STATUS", -1).fluentPut("MESSAGE", "会员ID不能为空");
        }
        
        CustomerInfoRequest request = new CustomerInfoRequest(hyid);
        log.info("开始获取会员详情，会员ID: {}, 请求参数: {}", hyid, request);
        try {
            // 直接使用sendRequest获取JSONObject响应
            JSONObject response = hxApiClient.sendRequest(request);
            // 无需转换，直接返回
            log.info("获取会员详情成功，会员ID: {}", hyid);
            return response;
        } catch (Exception e) {
            log.error("获取会员详情异常，会员ID: {}, 错误: {}", hyid, e.getMessage(), e);
            JSONObject errorResponse = new JSONObject();
            errorResponse.put("STATUS", -1);
            errorResponse.put("MESSAGE", "调用外部服务获取会员详情失败: " + e.getMessage());
            return errorResponse;
        }
    }
}
</file>

<file path="hx-api/src/main/java/com/example/hx_api/service/UserService.java">
package com.example.hx_api.service;

import com.example.hx_api.model.dto.UserDTO;
import com.example.hx_api.model.vo.UserVO;

/**
 * 用户服务接口
 */
public interface UserService {
    /**
     * 用户登录
     *
     * @param userDTO 用户DTO
     * @return 用户信息
     */
    UserVO login(UserDTO userDTO);

    /**
     * 获取用户信息
     *
     * @param id 用户ID
     * @return 用户信息
     */
    UserVO getUserInfo(Integer id);

    /**
     * 更新用户信息
     *
     * @param userDTO 用户DTO
     */
    void updateUser(UserDTO userDTO);

    /**
     * 添加用户
     *
     * @param userDTO 用户DTO
     * @return 是否添加成功
     */
    boolean addUser(UserDTO userDTO);

    /**
     * 移动用户到新部门
     *
     * @param userId 用户ID
     * @param deptId 部门ID
     * @return 是否移动成功
     */
    boolean moveUser(Integer userId, Integer deptId);
}
</file>

<file path="hx-api/src/main/java/com/example/hx_api/service/VipService.java">
package com.example.hx_api.service;

import com.example.hx_api.model.dto.VipDTO;
import com.example.hx_api.model.vo.VipVO;

import java.util.List;
import java.util.Map; // 导入 Map

/**
 * VIP会员服务接口
 */
public interface VipService {
    /**
     * 根据ID获取VIP信息
     *
     * @param id VIP ID
     * @return VIP信息
     */
    VipVO getVipById(Integer id);
    
    /**
     * 根据会员ID获取VIP信息
     *
     * @param hyid 会员ID
     * @return VIP信息列表
     */
    List<VipVO> getVipsByHyid(Integer hyid);
    
    /**
     * 添加VIP
     *
     * @param vipDTO VIP数据传输对象
     * @return 是否添加成功
     */
    boolean addVip(VipDTO vipDTO);
    
    /**
     * 更新VIP信息
     *
     * @param vipDTO VIP数据传输对象
     */
    void updateVip(VipDTO vipDTO);
    
    /**
     * 获取"念念不忘"会员列表
     *
     * @param userId 用户ID
     * @param page 页码
     * @param size 每页数量
     * @param sortBy 排序字段
     * @param sortDir 排序方向 (asc/desc)
     * @return 包含会员列表和总数的Map
     */
    Map<String, Object> getNeverForgetVips(Integer userId, int page, int size, String sortBy, String sortDir);
    
    /**
     * 获取"好久不见"会员列表
     *
     * @param userId 用户ID
     * @param page 页码
     * @param size 每页数量
     * @param sortBy 排序字段
     * @param sortDir 排序方向 (asc/desc)
     * @return 包含会员列表和总数的Map
     */
    Map<String, Object> getLongTimeNoSeeVips(Integer userId, int page, int size, String sortBy, String sortDir);
    
    /**
     * 获取"念念不忘"会员数量
     *
     * @param userId 用户ID
     * @return 会员数量
     */
    int getNeverForgetVipsCount(Integer userId);
    
    /**
     * 获取"好久不见"会员数量
     *
     * @param userId 用户ID
     * @return 会员数量
     */
    int getLongTimeNoSeeVipsCount(Integer userId);
    
    /**
     * 根据用户ID获取VIP列表
     *
     * @param userId 用户ID
     * @return 会员列表
     */
    List<VipVO> getVipsByUserId(Integer userId);
    
    /**
     * 移动VIP到新的维护人
     *
     * @param vipId  VIP ID
     * @param userId 新的维护人ID
     * @return 是否移动成功
     */
    boolean moveVip(Integer vipId, Integer userId);
    
    /**
     * 模糊查询VIP
     *
     * @param name 会员名称
     * @return 会员列表
     */
    List<VipVO> findVipsByNameLike(String name);
    
    /**
     * 根据名称获取VIP列表
     *
     * @param name 会员名称
     * @return 会员列表
     */
    List<VipVO> getVipsByName(String name);
    
    /**
     * 删除VIP
     *
     * @param id VIP ID
     */
    void deleteVip(Integer id);
    
    /**
     * 获取所有VIP
     *
     * @return 会员列表
     */
    List<VipVO> getAllVips();
    
    /**
     * 获取所有VIP数量
     *
     * @return 会员数量
     */
    int getAllVipsCount();
    
    /**
     * 更新所有VIP的RFM信息
     */
    void updateAllVipsRfmInfo();

    /**
     * 根据手机号码查找会员列表 (调用外部API)
     *
     * @param phoneNumber 手机号码
     * @return 调用外部API返回的JSONObject，可能包含会员列表或其他信息
     */
    com.alibaba.fastjson.JSONObject findVipsByPhoneNumber(String phoneNumber);

    /**
     * 根据会员ID获取VIP详细信息 (调用外部API)
     *
     * @param hyid 会员ID
     * @return 调用外部API返回的JSONObject，包含会员详情
     */
    com.alibaba.fastjson.JSONObject getVipDetailByHyid(Integer hyid);
}
</file>

<file path="hx-api/src/main/java/com/example/hx_api/task/VipDataUpdateTask.java">
package com.example.hx_api.task;

import com.example.hx_api.service.VipService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

/**
 * VIP数据更新定时任务
 */
@Slf4j
@Component
public class VipDataUpdateTask {
    @Autowired
    private VipService vipService;
    
    /**
     * 每天23:30更新所有VIP的RFM信息
     */
    @Scheduled(cron = "0 30 23 * * ?")
    public void updateVipRfmInfo() {
        log.info("开始执行VIP会员RFM数据更新定时任务");
        try {
            vipService.updateAllVipsRfmInfo();
            log.info("VIP会员RFM数据更新定时任务执行完成");
        } catch (Exception e) {
            log.error("VIP会员RFM数据更新定时任务执行失败", e);
        }
    }
}
</file>

<file path="hx-api/src/main/resources/application-dev.yml">
spring:
  datasource:
    url: jdbc:mysql://101.42.104.145:3306/hx?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&useSSL=false
    username: root
    password: miaoshidahu

logging:
  level:
    com.example.hx_api: debug
    org.springframework: info

# 开发环境下启用Forest日志
forest:
  log-request: true
  log-response-status: true
  log-response-content: true

# 开发环境下API配置
hx:
  api:
    baseUrl: http://101.43.69.26:9129

# 单独为 Forest 定义 baseUrl
hxApiBaseUrl: http://101.43.69.26:9129
</file>

<file path="hx-api/src/main/resources/application-prod.yml">
spring:
  datasource:
    url: jdbc:mysql://101.42.104.145:3306/hx?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&useSSL=false
    username: root
    password: miaoshidahu

logging:
  level:
    com.example.hx_api: info
    org.springframework: info

# 生产环境下禁用Forest详细日志
forest:
  log-request: false
  log-response-status: false
  log-response-content: false

# 生产环境下API配置
hx:
  api:
    baseUrl: http://101.43.69.26:9129
</file>

<file path="hx-mobel-vue/src/services/api.js">
import axios from 'axios';

// 响应处理函数
const handleResponse = response => {
  // 检查响应是否有data.data格式（Result<T>格式）
  if (response.data && Object.prototype.hasOwnProperty.call(response.data, 'code')) {
    return response.data.data;
  }
  return response.data;
};

// 会员相关API
export const vipApi = {
  // 获取念念不忘会员列表
  getNeverForgetVips: async (userId) => {
    const response = await axios.get(`/api/vips/never-forget/${userId}`); // vips
    return handleResponse(response);
  },
  
  // 获取好久不见会员列表
  getLongTimeNoSeeVips: async (userId) => {
    const response = await axios.get(`/api/vips/long-time-no-see/${userId}`); // vips
    return handleResponse(response);
  },
  
  // 获取念念不忘会员数量
  getNeverForgetVipsCount: async (userId) => {
    const response = await axios.get(`/api/vips/never-forget-count/${userId}`); // vips
    return handleResponse(response);
  },
  
  // 获取好久不见会员数量
  getLongTimeNoSeeVipsCount: async (userId) => {
    const response = await axios.get(`/api/vips/long-time-no-see-count/${userId}`); // vips
    return handleResponse(response);
  },
  
  // 获取所有VIP数量
  getAllVipsCount: async () => {
    const response = await axios.get('/api/vips/count'); // vips
    return handleResponse(response);
  },
  
  // 获取所有VIP
  getAllVips: async () => {
    const response = await axios.get('/api/vips'); // vips
    return handleResponse(response);
  },
  
  // 根据ID获取VIP信息
  getVipById: async (id) => {
    const response = await axios.get(`/api/vips/${id}`); // vips
    return handleResponse(response);
  },
  
  // 根据用户ID获取VIP列表
  getVipsByUserId: async (userId) => {
    const response = await axios.get(`/api/vips/user/${userId}`); // vips
    return handleResponse(response);
  },
  
  // 根据名称获取VIP列表
  getVipsByName: async (name) => {
    const response = await axios.get(`/api/vips/name/${name}`); // vips
    return handleResponse(response);
  },
  
  // 模糊查询VIP
  findVipsByNameLike: async (name) => {
    const response = await axios.get(`/api/vips/search?name=${name}`); // vips
    return handleResponse(response);
  },

  // 根据手机号查找会员 (新添加)
  findVipsByPhoneNumber: async (phoneNumber) => {
    const response = await axios.get(`/api/vips/by-phone?phoneNumber=${phoneNumber}`); // vips
    return handleResponse(response); // 注意：后端直接返回JSONObject，handleResponse可能需要调整或调用者直接处理原始data
  },
  
  // 根据会员ID获取会员详情 (新添加)
  getVipDetailByHyid: async (hyid) => {
    const response = await axios.get(`/api/vips/detail/${hyid}`);
    return handleResponse(response);
  },
  
  // 添加VIP
  addVip: async (vipData) => {
    const response = await axios.post('/api/vips', vipData); // vips
    return handleResponse(response);
  },
  
  // 更新VIP信息
  updateVip: async (vipData) => {
    const response = await axios.put('/api/vips', vipData); // vips
    return handleResponse(response);
  },
  
  // 删除VIP
  deleteVip: async (id) => {
    const response = await axios.delete(`/api/vips/${id}`); // vips
    return handleResponse(response);
  },
  
  // 移动VIP到新的维护人
  moveVip: async (vipId, userId) => {
    const response = await axios.put(`/api/vips/move/${vipId}/${userId}`); // vips
    return handleResponse(response);
  }
  // 移除了 checkRepeat 和 checkRepeatAdmin
};

// 用户相关API
export const userApi = {
  // 用户登录
  login: async (userData) => {
    const response = await axios.post('/api/user/login', userData);
    return handleResponse(response);
  },
  
  // 获取用户信息
  getUserInfo: async (id) => {
    const response = await axios.get(`/api/user/${id}`);
    return handleResponse(response);
  },
  
  // 更新用户信息
  updateUser: async (userData) => {
    const response = await axios.put('/api/user', userData);
    return handleResponse(response);
  },
  
  // 添加用户
  addUser: async (userData) => {
    const response = await axios.post('/api/user', userData); // 确认后端UserController的addUser是否是 @PostMapping("/")
    return handleResponse(response);
  },
  
  // 移动用户到新的部门
  moveUser: async (userId, deptId) => {
    const response = await axios.put(`/api/user/move/${userId}/${deptId}`);
    return handleResponse(response);
  }
};

// 部门相关API
export const deptApi = {
  // 获取所有部门
  getAllDepts: async () => {
    const response = await axios.get('/api/depts'); // depts
    return handleResponse(response);
  },
  
  // 获取级联部门
  getCascadeDept: async () => {
    const response = await axios.get('/api/depts/cascade'); // depts
    return handleResponse(response);
  },
  
  // 获取部门统计信息
  getDeptStatsById: async (id) => { // Renamed from getDeptCountById for clarity
    const response = await axios.get(`/api/depts/${id}/stats`); // depts
    return handleResponse(response);
  }
};

// 客户相关API (旧版，需要映射到新的VIP API)
export const customerApi = {
  // 根据手机号查找客户 -> 映射到 vipApi.findVipsByPhoneNumber
  findCustomersByPhone: async (phone) => {
    // const response = await axios.get(`/api/customer/search?phone=${phone}`);
    // 直接调用新的vipApi方法
    const response = await axios.get(`/api/vips/by-phone?phoneNumber=${phone}`);
    return handleResponse(response); // 注意返回的是原始JSONObject
  },
  
  // 获取客户信息 -> 映射到 vipApi.getVipById (假设hyid是vip的自增id)
  // 如果hyid是业务id，则后端需要相应接口
  getCustomerInfo: async (hyid) => {
    // const response = await axios.get(`/api/customer/info/${hyid}`);
    // 假设hyid可以作为vip id使用
    const response = await axios.get(`/api/vips/${hyid}`);
    return handleResponse(response);
  }
};
</file>

<file path="hx-pc-vue/src/services/api.js">
import axios from 'axios';

// 响应处理函数
const handleResponse = response => {
  // 检查响应是否有data.data格式（Result<T>格式）
  if (response.data && Object.prototype.hasOwnProperty.call(response.data, 'code')) {
    return response.data.data;
  }
  return response.data;
};

// 会员相关API
export const vipApi = {
  // 获取念念不忘会员列表
  getNeverForgetVips: async (userId, page, size, sortBy, sortDir) => {
    const params = { page, size };
    if (sortBy && sortDir) {
      params.sortBy = sortBy;
      params.sortDir = sortDir;
    }
    const response = await axios.get(`/api/vips/never-forget/${userId}`, { params });
    return handleResponse(response);
  },
  
  // 获取好久不见会员列表
  getLongTimeNoSeeVips: async (userId, page, size, sortBy, sortDir) => {
    const params = { page, size };
    if (sortBy && sortDir) {
      params.sortBy = sortBy;
      params.sortDir = sortDir;
    }
    const response = await axios.get(`/api/vips/long-time-no-see/${userId}`, { params });
    return handleResponse(response);
  },
  
  // 获取念念不忘会员数量
  getNeverForgetVipsCount: async (userId) => {
    const response = await axios.get(`/api/vips/never-forget-count/${userId}`); // vips
    return handleResponse(response);
  },
  
  // 获取好久不见会员数量
  getLongTimeNoSeeVipsCount: async (userId) => {
    const response = await axios.get(`/api/vips/long-time-no-see-count/${userId}`); // vips
    return handleResponse(response);
  },
  
  // 获取所有VIP数量
  getAllVipsCount: async () => {
    const response = await axios.get('/api/vips/count'); // vips
    return handleResponse(response);
  },
  
  // 获取所有VIP
  getAllVips: async () => {
    const response = await axios.get('/api/vips'); // vips
    return handleResponse(response);
  },
  
  // 根据ID获取VIP信息
  getVipById: async (id) => {
    const response = await axios.get(`/api/vips/${id}`); // vips
    return handleResponse(response);
  },
  
  // 根据用户ID获取VIP列表
  getVipsByUserId: async (userId) => {
    const response = await axios.get(`/api/vips/user/${userId}`); // vips
    return handleResponse(response);
  },
  
  // 根据名称获取VIP列表
  getVipsByName: async (name) => {
    const response = await axios.get(`/api/vips/name/${name}`); // vips
    return handleResponse(response);
  },
  
  // 模糊查询VIP
  findVipsByNameLike: async (name) => {
    const response = await axios.get(`/api/vips/search?name=${name}`); // vips
    return handleResponse(response);
  },

  // 根据手机号查找会员 (新添加)
  findVipsByPhoneNumber: async (phoneNumber) => {
    const response = await axios.get(`/api/vips/by-phone?phoneNumber=${phoneNumber}`); // vips
    return handleResponse(response); // 注意：后端直接返回JSONObject，handleResponse可能需要调整或调用者直接处理原始data
  },
  
  // 根据会员ID获取会员详情 (新添加)
  getVipDetailByHyid: async (hyid) => {
    const response = await axios.get(`/api/vips/detail/${hyid}`);
    return handleResponse(response);
  },
  
  // 添加VIP
  addVip: async (vipData) => {
    const response = await axios.post('/api/vips', vipData); // vips
    return handleResponse(response);
  },
  
  // 更新VIP信息
  updateVip: async (vipData) => {
    const response = await axios.put('/api/vips', vipData); // vips
    return handleResponse(response);
  },
  
  // 删除VIP
  deleteVip: async (id) => {
    const response = await axios.delete(`/api/vips/${id}`); // vips
    return handleResponse(response);
  },
  
  // 移动VIP到新的维护人
  moveVip: async (vipId, userId) => {
    const response = await axios.put(`/api/vips/move/${vipId}/${userId}`); // vips
    return handleResponse(response);
  }
  // 移除了 checkRepeat 和 checkRepeatAdmin
};

// 用户相关API
export const userApi = {
  // 用户登录
  login: async (userData) => {
    const response = await axios.post('/api/user/login', userData);
    return handleResponse(response);
  },
  
  // 获取用户信息
  getUserInfo: async (id) => {
    const response = await axios.get(`/api/user/${id}`);
    return handleResponse(response);
  },
  
  // 更新用户信息
  updateUser: async (userData) => {
    const response = await axios.put('/api/user', userData);
    return handleResponse(response);
  },
  
  // 添加用户
  addUser: async (userData) => {
    const response = await axios.post('/api/user', userData); // 确认后端UserController的addUser是否是 @PostMapping("/")
    return handleResponse(response);
  },
  
  // 移动用户到新的部门
  moveUser: async (userId, deptId) => {
    const response = await axios.put(`/api/user/move/${userId}/${deptId}`);
    return handleResponse(response);
  }
};

// 部门相关API
export const deptApi = {
  // 获取所有部门
  getAllDepts: async () => {
    const response = await axios.get('/api/depts'); // depts
    return handleResponse(response);
  },
  
  // 获取级联部门
  getCascadeDept: async () => {
    const response = await axios.get('/api/depts/cascade'); // depts
    return handleResponse(response);
  },
  
  // 获取部门统计信息
  getDeptStatsById: async (id) => { // Renamed from getDeptCountById for clarity and new path
    const response = await axios.get(`/api/depts/${id}/stats`); // depts
    return handleResponse(response);
  }
};

// 客户相关API (旧版，需要映射到新的VIP API)
export const customerApi = {
  // 根据手机号查找客户 -> 映射到 vipApi.findVipsByPhoneNumber
  findCustomersByPhone: async (phone) => {
    const response = await axios.get(`/api/vips/by-phone?phoneNumber=${phone}`);
    return handleResponse(response); // 注意返回的是原始JSONObject
  },
  
  // 获取客户信息 -> 映射到 vipApi.getVipById (假设hyid是vip的自增id)
  // 如果hyid是业务id，则后端需要相应接口
  getCustomerInfo: async (hyid) => {
    const response = await axios.get(`/api/vips/${hyid}`); // 假设hyid可以作为vip id使用
    return handleResponse(response);
  }
};
</file>

<file path=".gitignore">
# 默认忽略的文件
/shelf/
/.idea/workspace.xml
# 基于编辑器的 HTTP 客户端请求
/httpRequests/
# Datasource local storage ignored files
/dataSources/
/dataSources.local.xml
.idea/
*.iws
*.iml
*.ipr
out/
target/
# vue
/dist/
node_modules/
/hx-api/.mvn/
/hx-mobel-vue/dist/
/hx-pc-vue/dist/
idea/
.vscode/
</file>

<file path="hx-api/HELP.md">
# Getting Started

### Reference Documentation

For further reference, please consider the following sections:

* [Official Apache Maven documentation](https://maven.apache.org/guides/index.html)
* [Spring Boot Maven Plugin Reference Guide](https://docs.spring.io/spring-boot/docs/2.7.9/maven-plugin/reference/html/)
* [Create an OCI image](https://docs.spring.io/spring-boot/docs/2.7.9/maven-plugin/reference/html/#build-image)
* [MyBatis Framework](https://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/)

### Guides

The following guides illustrate how to use some features concretely:

* [MyBatis Quick Start](https://github.com/mybatis/spring-boot-starter/wiki/Quick-Start)
* [Accessing data with MySQL](https://spring.io/guides/gs/accessing-data-mysql/)
</file>

<file path="hx-api/mvnw">
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Maven Start Up Batch script
#
# Required ENV vars:
# ------------------
#   JAVA_HOME - location of a JDK home dir
#
# Optional ENV vars
# -----------------
#   M2_HOME - location of maven2's installed home dir
#   MAVEN_OPTS - parameters passed to the Java VM when running Maven
#     e.g. to debug Maven itself, use
#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files
# ----------------------------------------------------------------------------

if [ -z "$MAVEN_SKIP_RC" ] ; then

  if [ -f /usr/local/etc/mavenrc ] ; then
    . /usr/local/etc/mavenrc
  fi

  if [ -f /etc/mavenrc ] ; then
    . /etc/mavenrc
  fi

  if [ -f "$HOME/.mavenrc" ] ; then
    . "$HOME/.mavenrc"
  fi

fi

# OS specific support.  $var _must_ be set to either true or false.
cygwin=false;
darwin=false;
mingw=false
case "`uname`" in
  CYGWIN*) cygwin=true ;;
  MINGW*) mingw=true;;
  Darwin*) darwin=true
    # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home
    # See https://developer.apple.com/library/mac/qa/qa1170/_index.html
    if [ -z "$JAVA_HOME" ]; then
      if [ -x "/usr/libexec/java_home" ]; then
        export JAVA_HOME="`/usr/libexec/java_home`"
      else
        export JAVA_HOME="/Library/Java/Home"
      fi
    fi
    ;;
esac

if [ -z "$JAVA_HOME" ] ; then
  if [ -r /etc/gentoo-release ] ; then
    JAVA_HOME=`java-config --jre-home`
  fi
fi

if [ -z "$M2_HOME" ] ; then
  ## resolve links - $0 may be a link to maven's home
  PRG="$0"

  # need this for relative symlinks
  while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
      PRG="$link"
    else
      PRG="`dirname "$PRG"`/$link"
    fi
  done

  saveddir=`pwd`

  M2_HOME=`dirname "$PRG"`/..

  # make it fully qualified
  M2_HOME=`cd "$M2_HOME" && pwd`

  cd "$saveddir"
  # echo Using m2 at $M2_HOME
fi

# For Cygwin, ensure paths are in UNIX format before anything is touched
if $cygwin ; then
  [ -n "$M2_HOME" ] &&
    M2_HOME=`cygpath --unix "$M2_HOME"`
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
  [ -n "$CLASSPATH" ] &&
    CLASSPATH=`cygpath --path --unix "$CLASSPATH"`
fi

# For Mingw, ensure paths are in UNIX format before anything is touched
if $mingw ; then
  [ -n "$M2_HOME" ] &&
    M2_HOME="`(cd "$M2_HOME"; pwd)`"
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME="`(cd "$JAVA_HOME"; pwd)`"
fi

if [ -z "$JAVA_HOME" ]; then
  javaExecutable="`which javac`"
  if [ -n "$javaExecutable" ] && ! [ "`expr \"$javaExecutable\" : '\([^ ]*\)'`" = "no" ]; then
    # readlink(1) is not available as standard on Solaris 10.
    readLink=`which readlink`
    if [ ! `expr "$readLink" : '\([^ ]*\)'` = "no" ]; then
      if $darwin ; then
        javaHome="`dirname \"$javaExecutable\"`"
        javaExecutable="`cd \"$javaHome\" && pwd -P`/javac"
      else
        javaExecutable="`readlink -f \"$javaExecutable\"`"
      fi
      javaHome="`dirname \"$javaExecutable\"`"
      javaHome=`expr "$javaHome" : '\(.*\)/bin'`
      JAVA_HOME="$javaHome"
      export JAVA_HOME
    fi
  fi
fi

if [ -z "$JAVACMD" ] ; then
  if [ -n "$JAVA_HOME"  ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
    else
      JAVACMD="$JAVA_HOME/bin/java"
    fi
  else
    JAVACMD="`\\unset -f command; \\command -v java`"
  fi
fi

if [ ! -x "$JAVACMD" ] ; then
  echo "Error: JAVA_HOME is not defined correctly." >&2
  echo "  We cannot execute $JAVACMD" >&2
  exit 1
fi

if [ -z "$JAVA_HOME" ] ; then
  echo "Warning: JAVA_HOME environment variable is not set."
fi

CLASSWORLDS_LAUNCHER=org.codehaus.plexus.classworlds.launcher.Launcher

# traverses directory structure from process work directory to filesystem root
# first directory with .mvn subdirectory is considered project base directory
find_maven_basedir() {

  if [ -z "$1" ]
  then
    echo "Path not specified to find_maven_basedir"
    return 1
  fi

  basedir="$1"
  wdir="$1"
  while [ "$wdir" != '/' ] ; do
    if [ -d "$wdir"/.mvn ] ; then
      basedir=$wdir
      break
    fi
    # workaround for JBEAP-8937 (on Solaris 10/Sparc)
    if [ -d "${wdir}" ]; then
      wdir=`cd "$wdir/.."; pwd`
    fi
    # end of workaround
  done
  echo "${basedir}"
}

# concatenates all lines of a file
concat_lines() {
  if [ -f "$1" ]; then
    echo "$(tr -s '\n' ' ' < "$1")"
  fi
}

BASE_DIR=`find_maven_basedir "$(pwd)"`
if [ -z "$BASE_DIR" ]; then
  exit 1;
fi

##########################################################################################
# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
# This allows using the maven wrapper in projects that prohibit checking in binary data.
##########################################################################################
if [ -r "$BASE_DIR/.mvn/wrapper/maven-wrapper.jar" ]; then
    if [ "$MVNW_VERBOSE" = true ]; then
      echo "Found .mvn/wrapper/maven-wrapper.jar"
    fi
else
    if [ "$MVNW_VERBOSE" = true ]; then
      echo "Couldn't find .mvn/wrapper/maven-wrapper.jar, downloading it ..."
    fi
    if [ -n "$MVNW_REPOURL" ]; then
      jarUrl="$MVNW_REPOURL/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"
    else
      jarUrl="https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"
    fi
    while IFS="=" read key value; do
      case "$key" in (wrapperUrl) jarUrl="$value"; break ;;
      esac
    done < "$BASE_DIR/.mvn/wrapper/maven-wrapper.properties"
    if [ "$MVNW_VERBOSE" = true ]; then
      echo "Downloading from: $jarUrl"
    fi
    wrapperJarPath="$BASE_DIR/.mvn/wrapper/maven-wrapper.jar"
    if $cygwin; then
      wrapperJarPath=`cygpath --path --windows "$wrapperJarPath"`
    fi

    if command -v wget > /dev/null; then
        if [ "$MVNW_VERBOSE" = true ]; then
          echo "Found wget ... using wget"
        fi
        if [ -z "$MVNW_USERNAME" ] || [ -z "$MVNW_PASSWORD" ]; then
            wget "$jarUrl" -O "$wrapperJarPath" || rm -f "$wrapperJarPath"
        else
            wget --http-user=$MVNW_USERNAME --http-password=$MVNW_PASSWORD "$jarUrl" -O "$wrapperJarPath" || rm -f "$wrapperJarPath"
        fi
    elif command -v curl > /dev/null; then
        if [ "$MVNW_VERBOSE" = true ]; then
          echo "Found curl ... using curl"
        fi
        if [ -z "$MVNW_USERNAME" ] || [ -z "$MVNW_PASSWORD" ]; then
            curl -o "$wrapperJarPath" "$jarUrl" -f
        else
            curl --user $MVNW_USERNAME:$MVNW_PASSWORD -o "$wrapperJarPath" "$jarUrl" -f
        fi

    else
        if [ "$MVNW_VERBOSE" = true ]; then
          echo "Falling back to using Java to download"
        fi
        javaClass="$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.java"
        # For Cygwin, switch paths to Windows format before running javac
        if $cygwin; then
          javaClass=`cygpath --path --windows "$javaClass"`
        fi
        if [ -e "$javaClass" ]; then
            if [ ! -e "$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class" ]; then
                if [ "$MVNW_VERBOSE" = true ]; then
                  echo " - Compiling MavenWrapperDownloader.java ..."
                fi
                # Compiling the Java class
                ("$JAVA_HOME/bin/javac" "$javaClass")
            fi
            if [ -e "$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class" ]; then
                # Running the downloader
                if [ "$MVNW_VERBOSE" = true ]; then
                  echo " - Running MavenWrapperDownloader.java ..."
                fi
                ("$JAVA_HOME/bin/java" -cp .mvn/wrapper MavenWrapperDownloader "$MAVEN_PROJECTBASEDIR")
            fi
        fi
    fi
fi
##########################################################################################
# End of extension
##########################################################################################

export MAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-"$BASE_DIR"}
if [ "$MVNW_VERBOSE" = true ]; then
  echo $MAVEN_PROJECTBASEDIR
fi
MAVEN_OPTS="$(concat_lines "$MAVEN_PROJECTBASEDIR/.mvn/jvm.config") $MAVEN_OPTS"

# For Cygwin, switch paths to Windows format before running java
if $cygwin; then
  [ -n "$M2_HOME" ] &&
    M2_HOME=`cygpath --path --windows "$M2_HOME"`
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME=`cygpath --path --windows "$JAVA_HOME"`
  [ -n "$CLASSPATH" ] &&
    CLASSPATH=`cygpath --path --windows "$CLASSPATH"`
  [ -n "$MAVEN_PROJECTBASEDIR" ] &&
    MAVEN_PROJECTBASEDIR=`cygpath --path --windows "$MAVEN_PROJECTBASEDIR"`
fi

# Provide a "standardized" way to retrieve the CLI args that will
# work with both Windows and non-Windows executions.
MAVEN_CMD_LINE_ARGS="$MAVEN_CONFIG $@"
export MAVEN_CMD_LINE_ARGS

WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain

exec "$JAVACMD" \
  $MAVEN_OPTS \
  $MAVEN_DEBUG_OPTS \
  -classpath "$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar" \
  "-Dmaven.home=${M2_HOME}" \
  "-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}" \
  ${WRAPPER_LAUNCHER} $MAVEN_CONFIG "$@"
</file>

<file path="hx-api/mvnw.cmd">
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    https://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Maven Start Up Batch script
@REM
@REM Required ENV vars:
@REM JAVA_HOME - location of a JDK home dir
@REM
@REM Optional ENV vars
@REM M2_HOME - location of maven2's installed home dir
@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands
@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending
@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven
@REM     e.g. to debug Maven itself, use
@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files
@REM ----------------------------------------------------------------------------

@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'
@echo off
@REM set title of command window
title %0
@REM enable echoing by setting MAVEN_BATCH_ECHO to 'on'
@if "%MAVEN_BATCH_ECHO%" == "on"  echo %MAVEN_BATCH_ECHO%

@REM set %HOME% to equivalent of $HOME
if "%HOME%" == "" (set "HOME=%HOMEDRIVE%%HOMEPATH%")

@REM Execute a user defined script before this one
if not "%MAVEN_SKIP_RC%" == "" goto skipRcPre
@REM check for pre script, once with legacy .bat ending and once with .cmd ending
if exist "%USERPROFILE%\mavenrc_pre.bat" call "%USERPROFILE%\mavenrc_pre.bat" %*
if exist "%USERPROFILE%\mavenrc_pre.cmd" call "%USERPROFILE%\mavenrc_pre.cmd" %*
:skipRcPre

@setlocal

set ERROR_CODE=0

@REM To isolate internal variables from possible post scripts, we use another setlocal
@setlocal

@REM ==== START VALIDATION ====
if not "%JAVA_HOME%" == "" goto OkJHome

echo.
echo Error: JAVA_HOME not found in your environment. >&2
echo Please set the JAVA_HOME variable in your environment to match the >&2
echo location of your Java installation. >&2
echo.
goto error

:OkJHome
if exist "%JAVA_HOME%\bin\java.exe" goto init

echo.
echo Error: JAVA_HOME is set to an invalid directory. >&2
echo JAVA_HOME = "%JAVA_HOME%" >&2
echo Please set the JAVA_HOME variable in your environment to match the >&2
echo location of your Java installation. >&2
echo.
goto error

@REM ==== END VALIDATION ====

:init

@REM Find the project base dir, i.e. the directory that contains the folder ".mvn".
@REM Fallback to current working directory if not found.

set MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%
IF NOT "%MAVEN_PROJECTBASEDIR%"=="" goto endDetectBaseDir

set EXEC_DIR=%CD%
set WDIR=%EXEC_DIR%
:findBaseDir
IF EXIST "%WDIR%"\.mvn goto baseDirFound
cd ..
IF "%WDIR%"=="%CD%" goto baseDirNotFound
set WDIR=%CD%
goto findBaseDir

:baseDirFound
set MAVEN_PROJECTBASEDIR=%WDIR%
cd "%EXEC_DIR%"
goto endDetectBaseDir

:baseDirNotFound
set MAVEN_PROJECTBASEDIR=%EXEC_DIR%
cd "%EXEC_DIR%"

:endDetectBaseDir

IF NOT EXIST "%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config" goto endReadAdditionalConfig

@setlocal EnableExtensions EnableDelayedExpansion
for /F "usebackq delims=" %%a in ("%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a
@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%

:endReadAdditionalConfig

SET MAVEN_JAVA_EXE="%JAVA_HOME%\bin\java.exe"
set WRAPPER_JAR="%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.jar"
set WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain

set DOWNLOAD_URL="https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"

FOR /F "usebackq tokens=1,2 delims==" %%A IN ("%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.properties") DO (
    IF "%%A"=="wrapperUrl" SET DOWNLOAD_URL=%%B
)

@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
@REM This allows using the maven wrapper in projects that prohibit checking in binary data.
if exist %WRAPPER_JAR% (
    if "%MVNW_VERBOSE%" == "true" (
        echo Found %WRAPPER_JAR%
    )
) else (
    if not "%MVNW_REPOURL%" == "" (
        SET DOWNLOAD_URL="%MVNW_REPOURL%/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"
    )
    if "%MVNW_VERBOSE%" == "true" (
        echo Couldn't find %WRAPPER_JAR%, downloading it ...
        echo Downloading from: %DOWNLOAD_URL%
    )

    powershell -Command "&{"^
		"$webclient = new-object System.Net.WebClient;"^
		"if (-not ([string]::IsNullOrEmpty('%MVNW_USERNAME%') -and [string]::IsNullOrEmpty('%MVNW_PASSWORD%'))) {"^
		"$webclient.Credentials = new-object System.Net.NetworkCredential('%MVNW_USERNAME%', '%MVNW_PASSWORD%');"^
		"}"^
		"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $webclient.DownloadFile('%DOWNLOAD_URL%', '%WRAPPER_JAR%')"^
		"}"
    if "%MVNW_VERBOSE%" == "true" (
        echo Finished downloading %WRAPPER_JAR%
    )
)
@REM End of extension

@REM Provide a "standardized" way to retrieve the CLI args that will
@REM work with both Windows and non-Windows executions.
set MAVEN_CMD_LINE_ARGS=%*

%MAVEN_JAVA_EXE% ^
  %JVM_CONFIG_MAVEN_PROPS% ^
  %MAVEN_OPTS% ^
  %MAVEN_DEBUG_OPTS% ^
  -classpath %WRAPPER_JAR% ^
  "-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%" ^
  %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*
if ERRORLEVEL 1 goto error
goto end

:error
set ERROR_CODE=1

:end
@endlocal & set ERROR_CODE=%ERROR_CODE%

if not "%MAVEN_SKIP_RC%"=="" goto skipRcPost
@REM check for post script, once with legacy .bat ending and once with .cmd ending
if exist "%USERPROFILE%\mavenrc_post.bat" call "%USERPROFILE%\mavenrc_post.bat"
if exist "%USERPROFILE%\mavenrc_post.cmd" call "%USERPROFILE%\mavenrc_post.cmd"
:skipRcPost

@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'
if "%MAVEN_BATCH_PAUSE%"=="on" pause

if "%MAVEN_TERMINATE_CMD%"=="on" exit %ERROR_CODE%

cmd /C exit /B %ERROR_CODE%
</file>

<file path="hx-api/src/main/java/com/example/hx_api/ShoubaApplication.java">
package com.example.hx_api;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.scheduling.annotation.EnableScheduling;

/**
 * 应用启动类
 */
@SpringBootApplication
@EnableScheduling
public class ShoubaApplication {
    
    public static void main(String[] args) {
        SpringApplication.run(ShoubaApplication.class, args);
    }
}
</file>

<file path="hx-mobel-vue/babel.config.js">
module.exports = {
  presets: [
    '@vue/cli-plugin-babel/preset'
  ]
}
</file>

<file path="hx-mobel-vue/jsconfig.json">
{
  "compilerOptions": {
    "target": "es5",
    "module": "esnext",
    "baseUrl": "./",
    "moduleResolution": "node",
    "paths": {
      "@/*": [
        "src/*"
      ]
    },
    "lib": [
      "esnext",
      "dom",
      "dom.iterable",
      "scripthost"
    ]
  }
}
</file>

<file path="hx-mobel-vue/package.json">
{
  "name": "hx-mobel-vue",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "serve": "vue-cli-service serve",
    "build": "vue-cli-service build",
    "lint": "vue-cli-service lint"
  },
  "dependencies": {
    "axios": "^1.3.6",
    "core-js": "^3.8.3",
    "vant": "^2.12.54",
    "vue": "^2.6.14",
    "vue-router": "^3.5.2",
    "vuex": "^3.6.2"
  },
  "devDependencies": {
    "@babel/core": "^7.12.16",
    "@babel/eslint-parser": "^7.12.16",
    "@vue/cli-plugin-babel": "~5.0.0",
    "@vue/cli-plugin-eslint": "~5.0.0",
    "@vue/cli-service": "~5.0.0",
    "eslint": "^7.32.0",
    "eslint-plugin-vue": "^8.0.3",
    "vue-template-compiler": "^2.6.14"
  },
  "eslintConfig": {
    "root": true,
    "env": {
      "node": true
    },
    "extends": [
      "plugin:vue/essential",
      "eslint:recommended"
    ],
    "parserOptions": {
      "parser": "@babel/eslint-parser"
    },
    "rules": {}
  },
  "browserslist": [
    "> 1%",
    "last 2 versions",
    "not dead"
  ]
}
</file>

<file path="hx-mobel-vue/public/index.html">
<!DOCTYPE html>
<html lang="">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <link rel="icon" href="<%= BASE_URL %>favicon.ico">
    <title><%= htmlWebpackPlugin.options.title %></title>
  </head>
  <body>
    <noscript>
      <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled. Please enable it to continue.</strong>
    </noscript>
    <div id="app"></div>
    <!-- built files will be auto injected -->
  </body>
</html>
</file>

<file path="hx-mobel-vue/README.md">
# hx-mobel-vue

## Project setup
```
npm install
```

### Compiles and hot-reloads for development
```
npm run serve
```

### Compiles and minifies for production
```
npm run build
```

### Lints and fixes files
```
npm run lint
```

### Customize configuration
See [Configuration Reference](https://cli.vuejs.org/config/).
</file>

<file path="hx-mobel-vue/route/router.js">
import Vue from 'vue';
import VueRouter from 'vue-router';
import Index from "@/components/Index.vue";
import Login from "@/components/Login.vue";
import MyVip from "@/components/MyVip.vue";
import AddVip from "@/components/AddVip.vue";
import VipInfo from "@/components/VipInfo.vue";
import Register from "@/components/Register.vue";
import AllVips from "@/components/AllVips.vue";
//第三方库需要use一下才能用
Vue.use(VueRouter)
//引入组件


//定义routes路由的集合，数组类型
const routes=[

//单个路由均为对象类型，path代表的是路径，component代表组件
    {
        // 登录
        path: '/login',
        component: Login,
        meta: {
            isLogin: false
        }
    },
    {
        // 注册
        path: '/register',
        component: Register,
        meta: {
            isLogin: false
        }
    },
    {
        // 登录
        path: '/',
        component: Login,
        meta: {
            isLogin: false
        }
    },
    {

        path: '/index',
        component: Index,
        meta: {
            isLogin: true
        }
    },
    {

        path: '/myvip',
        component: MyVip,
        meta: {
            isLogin: true
        }
    },
    {

        path: '/addvip',
        component: AddVip,
        meta: {
            isLogin: true
        }
    },
    {

        path: '/vipinfo',
        component: VipInfo,
        meta: {
            isLogin: true
        }
    },
    {

        path: '/AllVips',
        component: AllVips,
        meta: {
            isLogin: true
        }
    }
//     {path:'/page1',component:page1},
//     {path:"/page2",component:page2},
//     //可以配置重定向
//     // {path:'',redirect:"page1"}
//     //或者重新写个路径为空的路由
//     {path:"",component:page1}
]
//实例化VueRouter并将routes添加进去
const router=new VueRouter({
    mode: 'history',
//ES6简写，等于routes：routes
    routes
});
//抛出这个这个实例对象方便外部读取以及访问
export default router
</file>

<file path="hx-mobel-vue/src/App.vue">
<template>
  <div id="app">
    <router-view></router-view>
<!--    <Login msg="Welcome to Your Vue.js App"/>-->
  </div>
</template>

<script>


export default {
  name: 'App',
  components: {

  }
}
</script>

<style>
#app {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-align: center;
  color: #2c3e50;
  margin-top: 0px;
}
</style>
</file>

<file path="hx-mobel-vue/src/components/AddVip.vue">
<template>
  <div>
    <van-nav-bar
        title="新增会员"
        left-text="返回"
        left-arrow
        @click-left="onClickLeft"
    />

    <form action="/">
      <van-search
          v-model="phone"
          placeholder="请输入会员手机号"
          @search="onSearch"
      />
    </form>
    <van-form @submit="onSubmit" v-if="form_show">
      <van-field
          v-model="VipForm.name"
          name="会员名称"
          label="会员名称"
          placeholder="会员名称"
          :rules=rules
          disabled
      />
      <van-field
          readonly
          clickable
          name="picker"
          :value="VipForm.age"
          label="年龄"
          placeholder="点击选择年龄"
          @click="age.showPicker = true"
          :rules=rules
      />
      <van-popup v-model="age.showPicker" position="bottom">
        <van-picker
            show-toolbar
            :columns="age.columns"
            @confirm="age_onConfirm"
            @cancel="age.showPicker = false"
        />
      </van-popup>
      <van-field
          v-model="VipForm.积分"
          name="积分"
          label="积分"
          placeholder="积分"
          :rules=rules
          disabled
      />

      <van-field
          v-model="VipForm.phone"
          type="tel"
          name="手机号"
          label="手机号"
          placeholder="手机号"
          :rules=rules
          disabled
      />
      <van-field
          v-model="VipForm.未消费天数"
          type="digit"
          name="未消费天数"
          label="未消费天数"
          placeholder="未消费天数"
          :rules=rules
          disabled
      />

      <van-field
          v-model="VipForm.adress"
          name="地址"
          label="地址"
          placeholder="地址"
          :rules=rules
      />

      <div style="margin: 16px;">
        <van-button round block type="info" native-type="submit">提交</van-button>
      </div>
    </van-form>
    <van-popup v-model="show" style="white-space: pre-wrap;">
      <h3>{{this.popup_title}}</h3>
        <van-cell center v-for="item in VipList" :key="item.HYID" :title="item.C_NAME" :value="item.INFO" style="width: 100%" is-link @click="onChoose(item)"></van-cell>
    </van-popup>
  </div>
</template>

<script>
import {Dialog, Toast} from "vant";
import { vipApi } from '@/services/api.js'; // 导入新的api服务

export default {
  name: "AddVip",
  data() {
    return {
      VipForm: {
        hyid:'',
        name: '',
        age: '',
        积分: '',
        phone: '',
        未消费天数: '',
        adress: '',
        维护人:{
          id:''
        }
      },
      phone:'',
      popup_title:'选择是哪一个会员',
      age: {
        columns: ['60后', '70后', '80后', '90后','00后','未知'],
        showPicker: false,
      },
      rules:[{ required: true, message: '不能为空' }],
      show:false,
      form_show:false,
      VipList:[]
    }
  },
  methods: {
    onClickLeft() {
      this.$router.back()
    },
    async onSubmit() { // 标记为 async
      Dialog.confirm({
        title: '确认提交',
      })
          .then(async () => { // 内部的 then 也标记为 async
            try {
              const vipPayload = {
                hyid: parseInt(this.VipForm.hyid, 10), // 确保是数字
                name: this.VipForm.name,
                age: this.VipForm.age,
                points: parseInt(this.VipForm.积分, 10) || 0, // 添加默认值0
                phone: this.VipForm.phone,
                nonConsumptionDays: parseInt(this.VipForm.未消费天数, 10) || 0, // 添加默认值0
                address: this.VipForm.adress,
                maintainerId: parseInt(this.VipForm.维护人.id, 10),
                // 添加默认的RFM值
                r: 3,
                f: 3,
                m: 3
              };
              
              // 验证必要字段
              if (isNaN(vipPayload.hyid)) {
                Toast.fail('会员ID必须是有效数字');
                return;
              }
              
              if (isNaN(vipPayload.maintainerId)) {
                Toast.fail('维护人ID必须是有效数字');
                return;
              }

              const success = await vipApi.addVip(vipPayload);
              if (success) { // 后端返回 boolean
                this.form_show = false;
                Toast.success('添加成功');
                this.phone = ''; // 清空搜索框
                this.VipList = [];
                // 可以选择清空VipForm或部分清空
                Object.keys(this.VipForm).forEach(key => {
                  if (key !== '维护人') {
                    this.VipForm[key] = '';
                  }
                });
              } else {
                // this.form_show = false; // 失败时表单可能需要保留
                Toast.fail('添加失败，会员可能已被添加或不符合校验规则');
              }
            } catch (error) {
              console.error("添加VIP失败:", error);
              Toast.fail('添加VIP请求失败，请检查网络或联系管理员');
            }
          })
          .catch(() => {
            // on cancel - 用户点击了取消
            Toast('已取消提交');
          });
    },
    age_onConfirm(value) {
      this.VipForm.age = value;
      this.age.showPicker = false;
    },
    async onSearch(){ // 标记为 async
      if (!this.phone || this.phone.trim() === '') {
        Toast('请输入手机号');
        return;
      }
      try {
        const resultJson = await vipApi.findVipsByPhoneNumber(this.phone.trim());
        // 外部API成功时 STATUS 为 0，且 MESSAGE 应为数组
        if (resultJson && resultJson.STATUS === 0 && resultJson.MESSAGE && Array.isArray(resultJson.MESSAGE)) {
          this.VipList = resultJson.MESSAGE;
          if (this.VipList.length === 0) {
            this.popup_title = '未找到相关会员, 请检查手机号是否正确';
            Toast.fail(this.popup_title); // 对于未找到的情况也明确提示
          } else {
            this.popup_title = '请选择要添加的会员';
          }
        } else {
          // 处理查找失败或外部API返回错误状态的情况
          this.VipList = [];
          let errorMsg = '查找会员失败，请稍后再试'; // 默认错误消息
          if (resultJson && resultJson.MESSAGE) {
            if (typeof resultJson.MESSAGE === 'string') {
              errorMsg = resultJson.MESSAGE;
            } else if (Array.isArray(resultJson.MESSAGE) && resultJson.MESSAGE.length > 0) {
              const firstMessageItem = resultJson.MESSAGE[0];
              if (typeof firstMessageItem === 'object' && firstMessageItem !== null) {
                if (firstMessageItem.INFO) {
                  errorMsg = firstMessageItem.INFO;
                } else if (firstMessageItem.ERROR_INFO) {
                  errorMsg = firstMessageItem.ERROR_INFO;
                } else {
                  // errorMsg = JSON.stringify(firstMessageItem); // 可选
                }
              }
            }
          } else if (resultJson && resultJson.STATUS !== undefined) {
             errorMsg = `查找失败，状态码: ${resultJson.STATUS}`;
          }
          this.popup_title = errorMsg;
          Toast.fail(errorMsg); // 对于错误情况也明确提示
        }
        this.show = true; // 无论成功失败，都显示选择/提示弹窗
      } catch (error) {
        console.error("查找VIP失败:", error);
        Toast.fail('查找VIP请求失败，请检查网络或联系管理员');
        this.VipList = [];
        this.popup_title = '查找请求异常，请稍后再试';
        this.show = true;
      }
    },
    async onChoose(Vip){ // Vip参数是从搜索结果选择的会员
      try {
        // 保存基本信息
        this.VipForm.hyid = Vip.HYID;
        this.VipForm.name = Vip.C_NAME;
        this.VipForm.phone = Vip.C_MOBILE;
        
        // 显示加载状态
        Toast.loading({
          message: '加载会员详情...',
          forbidClick: true,
        });
        
        // 调用API获取会员详情
        const detailResult = await vipApi.getVipDetailByHyid(Vip.HYID);
        Toast.clear();
        
        // 处理详情信息
        if (detailResult && detailResult.STATUS === 0 && detailResult.MESSAGE) {
          // MESSAGE直接是对象，不是数组
          const vipDetail = detailResult.MESSAGE;
          
          // 解析VIPINFO数组以获取具体字段值
          if (vipDetail.VIPINFO && Array.isArray(vipDetail.VIPINFO)) {
            for (const info of vipDetail.VIPINFO) {
              if (info.FIELD === 'D_LASTBUY') {
                this.VipForm.未消费天数 = info.VALUE || '';
              } else if (info.FIELD === 'N_ALLVALUE') {
                this.VipForm.积分 = info.VALUE || '';
              }
            }
          }
        } else {
          // 如果详情获取失败，则使用搜索结果中的基本信息
          this.VipForm.未消费天数 = Vip.D_LASTBUY !== undefined ? Vip.D_LASTBUY : (Vip.NON_CONSUMPTION_DAYS || '');
          this.VipForm.积分 = Vip.N_ALLVALUE !== undefined ? Vip.N_ALLVALUE : (Vip.POINTS || '');
          console.warn("获取会员详情失败，使用搜索结果中的基本信息");
        }
        
        // 清空需要用户填写的字段
        this.VipForm.age = '';
        this.VipForm.adress = '';
        
        this.show = false; // 关闭选择弹窗
        this.form_show = true; // 显示会员信息表单
      } catch (error) {
        Toast.clear();
        console.error("获取会员详情失败:", error);
        Toast.fail('获取会员详情失败');
      }
    }
  },
  created() {
    this.VipForm.维护人.id=window.localStorage.getItem('UserId');
  }

}
// 已删除残留代码
</script>

<style scoped>

</style>
</file>

<file path="hx-mobel-vue/src/components/AllDept.vue">
<template>
  <div>
    <van-cell-group inset title="部门列表">
      <van-cell title="单元格" value="内容" />
      <van-cell title="单元格" value="内容" label="描述信息" />
    </van-cell-group>
  </div>

</template>

<script>
export default {
  name: "AllDept"
}
</script>

<style scoped>

</style>
</file>

<file path="hx-mobel-vue/src/components/AllUser.vue">
<template>
  <div>
    <van-cell-group inset title="员工列表">
      <van-cell title="单元格" value="内容" />
      <van-cell title="单元格" value="内容" label="描述信息" />
    </van-cell-group>
  </div>
</template>

<script>
export default {
  name: "AllUser"
}
</script>

<style scoped>

</style>
</file>

<file path="hx-mobel-vue/src/components/AllVips.vue">
<template>
<div>
  <van-nav-bar
    title="欢聚一堂"
    left-text="返回"

    left-arrow
    @click-left="onClickLeft"
/>
  <van-field
      v-model="fieldValue"
      is-link
      readonly
      label="员工"
      placeholder="请选择员工"
      @click="show = true"
  />
  <van-popup v-model="show" round position="bottom">
    <van-cascader
        v-model="cascaderValue"
        :field-names="fieldNames"
        title="请选择员工"
        :options="options"
        @close="show = false"
        @finish="onFinish"
    />
  </van-popup>
  <div v-if="fieldValue!=''">
    <van-cell-group title="会员统计" style ="white-space: pre-line;">
      <van-cell center title="念念不忘数量"  :value="念念不忘数量"  />
      <van-cell center title="好久不见数量"  :value="好久不见数量"  />
    </van-cell-group>
    <van-cell-group title="会员列表" style ="white-space: pre-line;">
      <van-cell center :title="(index+1+'、')+item.name"  v-for="(item,index) in vips" :key="item.id" :label="'积分:'+item.积分+'\n'+item.未消费天数+'天未消费'+'\nRFM值 '+item.R+':'+item.F+':'+item.M" is-link @click="toVipInfo(item)" />
    </van-cell-group>
  </div>


</div>
</template>

<script>
import { Toast } from 'vant';
import { deptApi, vipApi } from '@/services/api.js'; // 导入新的api服务

export default {
  name: "AllVips",
  data(){
    return{
      options:{},
      show:false,
      cascaderValue:'',
      fieldValue:'',
      fieldNames: {
        text: 'name',
        value: 'id',
        children: 'users',
      },
      vips:[],
      念念不忘数量:'',
      好久不见数量:''
    }
  },
  created() {
    this.getCascader()
  },
  methods:{
    async getCascader(){ // 标记为 async
      try {
        const data = await deptApi.getCascadeDept();
        this.options = data;
        // console.log(data);
      } catch (error) {
        console.error("获取级联部门失败:", error);
        Toast.fail("获取部门数据失败");
      }
    },
    async onFinish({ value,selectedOptions }){ // 标记为 async
      try {
        const vipsData = await vipApi.getVipsByUserId(value);
        this.vips = vipsData;
        this.show = false;
        this.fieldValue = selectedOptions.map((option) => option.name).join('/');

        const neverForgetCount = await vipApi.getNeverForgetVipsCount(value);
        this.念念不忘数量 = neverForgetCount;

        const longTimeNoSeeCount = await vipApi.getLongTimeNoSeeVipsCount(value);
        this.好久不见数量 = longTimeNoSeeCount;

      } catch (error) {
        console.error("获取用户VIP数据失败:", error);
        Toast.fail("获取用户VIP数据失败");
      }
    },
    toVipInfo(vip){
      this.$router.push({  //核心语句
        path:'/vipinfo',   //跳转的路径
        query:{           //路由传参时push和query搭配使用 ，作用时传递参数
          id:vip.id ,
        }
      })
    },
    onClickLeft() {
      this.$router.back()
    },
  }
}
</script>

<style scoped>

</style>
</file>

<file path="hx-mobel-vue/src/components/Index.vue">
<template>
<div>

  <div v-if="active==0" >
    <van-nav-bar
        title="会员维护列表"
        right-text="添加会员"
        @click-right="onClickRight"></van-nav-bar>
    <van-cell-group inset>
      <van-cell center title="念念不忘"  is-link @click="toMyVip('念念不忘')"  :value="念念不忘数量+'位'" size="large" />
      <van-cell center title="好久不见"  is-link @click="toMyVip('好久不见')"   :value="好久不见数量+'位'" size="large"/>
      <van-cell center title="欢聚一堂"  is-link to="AllVips" :value="欢聚一堂数量+'位'"  size="large" />
    </van-cell-group>

  </div>

  <div v-if="active==1" >
    <Mine></Mine>
  </div>
  <div style="padding-bottom:100px">

  </div>

  <van-tabbar v-model="active">
    <van-tabbar-item icon="search">功能</van-tabbar-item>
    <van-tabbar-item icon="friends-o">我的</van-tabbar-item>
  </van-tabbar>
</div>
</template>

<script>
/* eslint-disable vue/multi-word-component-names */
import Mine from "@/components/Mine.vue";
import { vipApi } from '@/services/api.js'; // 导入新的api服务

export default {
  name: "Index",
  components: {Mine},
  data(){
    return{
      active:0,
      念念不忘数量:0,
      好久不见数量:0,
      欢聚一堂数量:0,
    }
  },
  created() {
    this.getNum()
  },
  methods:{
    toMyVip(type){
      this.$router.push({
        path: '/myvip',
        query: {
         type:type
        }
      })
    },
    async getNum(){ // 标记为 async
      const userId = localStorage.getItem('UserId');
      if (!userId) {
        console.error("UserId not found in localStorage");
        // 可以选择性地显示错误提示给用户
        // Toast.fail("无法获取用户信息，请重新登录");
        return;
      }
      try {
        const neverForgetCount = await vipApi.getNeverForgetVipsCount(userId);
        this.念念不忘数量 = neverForgetCount;

        const longTimeNoSeeCount = await vipApi.getLongTimeNoSeeVipsCount(userId);
        this.好久不见数量 = longTimeNoSeeCount;

        const allVipsCount = await vipApi.getAllVipsCount();
        this.欢聚一堂数量 = allVipsCount;

      } catch (error) {
        console.error("获取数量统计失败:", error);
        // Toast.fail("获取统计数据失败");
      }
    },
    onClickRight() {
      this.$router.push('/addvip')
    },
  }

}
</script>

<style scoped>

</style>
</file>

<file path="hx-mobel-vue/src/components/Login.vue">
<template>
  <div class="login">

    <van-form @submit="handleLogin" >
      <h2 class="title">和信后台管理系统-员工端</h2>
      <van-cell-group inset>
        <van-field
            v-model="loginForm.name"
            name="用户名"
            label="用户名"
            placeholder="用户名"
            :rules="[{ required: true, message: '请填写用户名' }]"
        />
        <van-field
            v-model="loginForm.password"
            type="password"
            name="密码"
            label="密码"
            placeholder="密码"
            :rules="[{ required: true, message: '请填写密码' }]"
        />
      </van-cell-group>
      <div style="margin: 16px;">
        <van-button round block   type="primary" native-type="submit">
          登录
        </van-button>
        <br> <br>
        <van-button round block   type="primary" to="register" native-type="submit">
          前往注册
        </van-button>
      </div>
    </van-form>

  </div>
</template>

<script>
import {Toast} from "vant";
import { userApi } from '../services/api';

export default {
  // eslint-disable-next-line vue/multi-word-component-names
  name: 'Login',
  props: {
    msg: String
  },
  data(){
    return{
      loginForm:{
        name:'',
        password:'',
        // rememberMe:false
      },
      loading:false
    }
  },
  methods:{
    handleLogin(){
        // 使用userApi服务中的login方法
        userApi.login(this.loginForm).then(data => {
          if (!data) {
            Toast.fail('密码错误或账号不存在');
          } else {
            //设置Vuex登录标志为true，默认userLogin为false
            this.$store.dispatch("userLogin", true);
            //Vuex在用户刷新的时候userLogin会回到默认值false，所以我们需要用到HTML5储存
            //我们设置一个名为Flag，值为isLogin的字段，作用是如果Flag有值且为isLogin的时候，证明用户已经登录了。
            localStorage.setItem("Flag", "isLogin");
            localStorage.setItem("UserId", data.id);
            //iViewUi的友好提示
            //登录成功后跳转到指定页面
            this.$router.push("/index");
          }
          console.log(data === null)
        }).catch(error => {
          console.error('登录失败:', error);
          Toast.fail('登录失败，请检查网络连接');
        });
    }
  }
}
</script>

<!-- Add "scoped" attribute to limit CSS to this component only -->
<style scoped>
.login {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100%;
  /*background-image: url("../assets/images/login-background.jpg");*/
  background-size: cover;
}
.login-form {
  border-radius: 6px;
  background: #ffffff;
  width: 400px;
  padding: 25px 25px 5px 25px;
}
</style>
</file>

<file path="hx-mobel-vue/src/components/Mine.vue">
<template>
  <div>
    <van-nav-bar
        title="我的信息"

    />
    <van-cell-group inset>
      <van-cell title="姓名" :value="user.name" size="large"/>
      <van-cell title="所属部门" :value="user.所属部门.name" size="large"/>
    </van-cell-group>
  </div>
</template>

<script>
import { userApi } from '@/services/api.js'; // 导入新的api服务

export default {
  // eslint-disable-next-line vue/multi-word-component-names
  name: "Mine",
  data(){
    return{
        user:{
          name: '', // 初始化，避免模板渲染时出错
          所属部门: { name: '' } // 初始化嵌套对象
        }
    }
  },
  methods:{
    async getUserInfo(){ // 标记为 async
      const userId = localStorage.getItem("UserId");
      if (!userId) {
        console.error("UserId not found in localStorage for Mine component");
        // Toast.fail("无法获取用户ID");
        return;
      }
      try {
        const userData = await userApi.getUserInfo(userId);
        if (userData) {
          this.user = { // 确保user对象结构与模板期望一致
            name: userData.name,
            所属部门: { // UserVO 中的 deptName 和 deptType 需要映射
              name: userData.deptName || 'N/A' // 如果没有部门名称，显示 N/A
            }
            // 如果 UserVO 还有其他字段需要在模板中使用，也应在此处映射
          };
        } else {
          // Toast.fail("获取用户信息失败");
          this.user = { name: '加载失败', 所属部门: { name: '' } };
        }
      } catch (error) {
        console.error("获取用户信息失败 (Mine.vue):", error);
        // Toast.fail("请求用户信息接口失败");
        this.user = { name: '请求失败', 所属部门: { name: '' } };
      }
    }
  },
  created() {
    this.getUserInfo()
  }
}
</script>

<style scoped>

</style>
</file>

<file path="hx-mobel-vue/src/components/MyVip.vue">
<template>
<div>
  <van-nav-bar
      :title="this.$route.query.type"
      left-text="返回"

      left-arrow
      @click-left="onClickLeft"
  />
<!--  <van-list-->
<!--      v-model="loading"-->
<!--      :finished="finished"-->
<!--      finished-text="没有更多了"-->
<!--      @load="onLoad"-->
<!--  >-->
<!--    <van-cell v-for="item in list" :key="item" :title="item" size="large" />-->
<!--  </van-list>-->
  <van-cell-group  style ="white-space: pre-line;">
    <van-cell v-for="(item,index) in list" :key="item.id" :title="(index+1+'、')+item.name" :label="'积分:'+item.points+'\n'+item.nonConsumptionDays+'天未消费'+'\nRFM值 '+item.r+':'+item.f+':'+item.m" size="large" is-link @click="toVipInfo(item)" />
  </van-cell-group>

</div>
</template>

<script>
import { vipApi } from '@/services/api.js'; // 导入新的api服务
import { Toast } from 'vant'; // 导入 Toast

export default {
  name: "MyVip",
  data() {
    return {
      list: [],
      loading: false,
      finished: false,
    };
  },
  created() {
      this.getVips(this.$route.query.start,this.$route.query.end)
  },
  methods: {
    async getVips(){ // 标记为 async
      const type = this.$route.query.type;
      const userId = localStorage.getItem("UserId");

      try {
        let vipList = [];
        if (type === '念念不忘'){
          if (!userId) { Toast.fail("用户ID获取失败"); return; }
          const response = await vipApi.getNeverForgetVips(userId);
          // 从响应中提取列表，考虑到可能是包含 list 属性的对象
          vipList = Array.isArray(response) ? response : (response && response.list ? response.list : []);
        } else if (type === '好久不见'){
          if (!userId) { Toast.fail("用户ID获取失败"); return; }
          const response = await vipApi.getLongTimeNoSeeVips(userId);
          // 从响应中提取列表，考虑到可能是包含 list 属性的对象
          vipList = Array.isArray(response) ? response : (response && response.list ? response.list : []);
        } else if (type === '欢聚一堂'){
          const response = await vipApi.getAllVips();
          // 从响应中提取列表，考虑到可能是包含 list 属性的对象
          vipList = Array.isArray(response) ? response : (response && response.list ? response.list : []);
        } else {
          Toast.fail("未知的VIP列表类型");
          this.list = [];
          return;
        }

        // 确保vipList是数组
        if (!Array.isArray(vipList)) {
          console.error('获取的会员列表不是数组:', vipList);
          Toast.fail('会员数据格式错误');
          this.list = [];
          return;
        }
        
        // 确保所有必要字段都有合法值
        this.list = vipList.map(vip => ({
          ...vip,
          points: vip.points !== undefined ? vip.points : 0,
          nonConsumptionDays: vip.nonConsumptionDays !== undefined ? vip.nonConsumptionDays : 0,
          r: vip.r !== undefined ? vip.r : 0,
          f: vip.f !== undefined ? vip.f : 0,
          m: vip.m !== undefined ? vip.m : 0
        }));
        
      } catch (error) {
        console.error(`获取VIP列表 (${type}) 失败:`, error);
        Toast.fail(`获取 "${type}" 列表失败`);
        this.list = [];
      }
    },
    onClickLeft() {
      this.$router.back()
    },

    async toVipInfo(vip){
      try {
        // 显示加载提示
        Toast.loading({
          message: '加载会员详情...',
          forbidClick: true,
        });
        
        // 调用API获取详细信息
        await vipApi.getVipDetailByHyid(vip.id);
        
        // 关闭加载提示
        Toast.clear();
        
        // 如果获取详情成功，跳转到会员详情页面
        this.$router.push({
          path:'/vipinfo',
          query:{
            id: vip.id,
          }
        });
      } catch (error) {
        // 关闭加载提示
        Toast.clear();
        
        console.error('获取会员详情失败:', error);
        Toast.fail('获取会员详情失败，请重试');
        
        // 即使获取详情失败，仍然跳转到会员详情页面，显示基本信息
        this.$router.push({
          path:'/vipinfo',
          query:{
            id: vip.id,
          }
        });
      }
    }
  },
}
</script>

<style scoped>

</style>
</file>

<file path="hx-mobel-vue/src/components/Register.vue">
<template>
<div>
  <van-nav-bar
      title="注册"
      left-text="返回"
      left-arrow
      @click-left="onClickLeft"

  />
  <van-form @submit="onSubmit" style="margin-top:200px">
    <van-field
        v-model="data.name"
        name="姓名"
        label="姓名"
        placeholder="姓名"
        :rules=rules
    />
    <van-field
        v-model="data.password"
        type="password"
        name="密码"
        label="密码"
        placeholder="密码"
        :rules=rules
    />
    <van-field
        readonly
        clickable
        name="picker"
        :value="data.所属部门.name"
        label="所属部门"
        placeholder="点击选择部门"
        @click="showPicker = true"
        :rules=rules
    />
    <van-popup v-model="showPicker" position="bottom">
      <van-picker
          show-toolbar
          :columns="depts"
          value-key="name"
          @confirm="onConfirm"
          @cancel="showPicker = false"
      />
    </van-popup>
    <div style="margin: 16px;">
      <van-button round block type="info" native-type="submit">注册</van-button>
    </div>
  </van-form>
</div>
</template>

<script>
import {Dialog, Toast} from "vant";
import { userApi, deptApi } from '../services/api';

export default {
  // eslint-disable-next-line vue/multi-word-component-names
  name: "Register",
  data(){
    return{
        data:{
          name:'',
          password:'',
          所属部门:{}
        },
      rules:[{ required: true, message: '不能为空' }],
      showPicker:false,
      depts:[]
    }
  },
  created() {
    this.getDepts()
  },
  methods:{
    onSubmit(){
      Dialog.confirm({
        title: '确认注册?',
      })
          .then(() => {
            // 使用API服务层进行用户注册
            userApi.addUser(this.data).then(result => {
              if (result === true) {
                Toast.success('注册成功,请返回登录页面');
              } else {
                Toast.fail('该用户名已使用');
              }
            }).catch(error => {
              console.error('注册失败:', error);
              Toast.fail('注册失败，请检查网络连接');
            });
          })
          .catch(() => {
            // on cancel
          });
    },
    getDepts(){
      // 使用API服务层获取部门列表
      deptApi.getAllDepts().then(data => {
        this.depts = data;
      }).catch(error => {
        console.error('获取部门列表失败:', error);
        Toast.fail('获取部门列表失败');
      });
    },
    onConfirm(value) {
      this.data.所属部门 = value;
      this.showPicker = false;
    },
    onClickLeft(){
      this.$router.back();
    }
  }
}
</script>

<style scoped>

</style>
</file>

<file path="hx-mobel-vue/src/components/VipInfo.vue">
<template>
<div>
  <van-nav-bar
      title="会员详情"
      left-text="返回"
      left-arrow
      @click-left="onClickLeft"
  />
  <van-cell-group>
    <van-cell center title="姓名" :value="vip.name" size="large" />
    <van-cell center title="年龄" :value="vip.age" size="large" />
    <van-cell center title="积分" :value="vip.points" size="large" />
    <van-cell center title="手机号" :value="vip.phone" size="large" />
    <van-cell center title="地址" :value="vip.address" size="large" />
    <van-cell center title="未消费天数" :value="vip.nonConsumptionDays + '天'" size="large" />
    <van-cell center title="RFM值" :value="vip.r + ':' + vip.f + ':' + vip.m" size="large" />
  </van-cell-group>
</div>
</template>

<script>
import { vipApi } from '@/services/api.js'; // 导入新的api服务
import { Toast } from 'vant'; // 导入 Toast

export default {
  name: "VipInfo",
  data(){
    return{
      vip: {
        id: '',
        name: '',
        age: '',
        points: 0,
        phone: '',
        address: '',
        nonConsumptionDays: 0,
        r: 0,
        f: 0,
        m: 0
      }
    }
  },
  methods:{
    onClickLeft() {
      this.$router.back()
    },
    async fetchVipInfo() {
      const vipId = this.$route.query.id;
      if (!vipId) {
        Toast.fail("未找到VIP ID");
        this.$router.back(); // 无ID则返回
        return;
      }
      
      try {
        // 加载提示
        Toast.loading({
          message: '加载会员详情...',
          forbidClick: true,
        });
        
        // 首先尝试获取基本会员信息
        const basicVipData = await vipApi.getVipById(vipId);
        
        if (basicVipData) {
          // 基础信息映射
          this.vip = {
            id: basicVipData.id,
            name: basicVipData.name || '',
            age: basicVipData.age || '未知',
            points: basicVipData.points || 0,
            phone: basicVipData.phone || '未知',
            address: basicVipData.address || '未知',
            nonConsumptionDays: basicVipData.nonConsumptionDays || 0,
            r: basicVipData.r || 0,
            f: basicVipData.f || 0,
            m: basicVipData.m || 0
          };
          
          // 尝试获取详细信息
          try {
            const detailResponse = await vipApi.getVipDetailByHyid(vipId);
            
            // 添加调试信息
            console.log('获取会员详情响应:', detailResponse);
            
            // 如果有详细信息，进一步更新vip对象
            if (detailResponse && detailResponse.STATUS === 0) {
              const message = detailResponse.MESSAGE;
              
              // 添加调试信息
              console.log('详情MESSAGE内容:', message);
              
              // 确保message是对象（有些API可能直接返回对象而不是数组）
              if (message) {
                // 针对VIPINFO字段进行处理
                if (message.VIPINFO && Array.isArray(message.VIPINFO)) {
                  message.VIPINFO.forEach(item => {
                    if (item.FIELD === "D_LASTBUY") {
                      this.vip.nonConsumptionDays = parseInt(item.VALUE) || 0;
                    } else if (item.FIELD === "N_ALLVALUE") {
                      this.vip.points = parseInt(item.VALUE) || 0;
                    }
                    // 可以添加更多的字段映射
                  });
                }
                
                // 更新其他可能的字段
                if (message.NAME) this.vip.name = message.NAME;
                if (message.PHONE) this.vip.phone = message.PHONE;
                if (message.ADDRESS) this.vip.address = message.ADDRESS;
                
                // 如果有RFM信息，也进行更新
                if (message.RFM && Array.isArray(message.RFM) && message.RFM.length > 0) {
                  const rfm = message.RFM[0];
                  this.vip.r = parseInt(rfm.rvalue) || 0;
                  this.vip.f = parseInt(rfm.fvalue) || 0;
                  this.vip.m = parseInt(rfm.mvalue) || 0;
                }
              }
            } else {
              console.warn('获取会员详情失败或返回错误:', detailResponse);
            }
          } catch (detailError) {
            console.error("获取会员详情失败:", detailError);
            // 不抛出异常，因为已经有基本信息
          }
        } else {
          Toast.fail("获取会员信息失败");
        }
      } catch (error) {
        console.error("获取会员信息失败:", error);
        Toast.fail("获取会员信息失败，请重试");
      } finally {
        // 关闭加载提示
        Toast.clear();
      }
    }
  },
  created() {
    this.fetchVipInfo(); // 调用新方法
  }
}
</script>

<style scoped>

</style>
</file>

<file path="hx-mobel-vue/src/components/Vips.vue">
<template>
  <div>
    <van-cell-group inset title="会员列表">
      <van-cell title="单元格" value="内容" />
      <van-cell title="单元格" value="内容" label="描述信息" />
    </van-cell-group>
  </div>
</template>

<script>
export default {
  // eslint-disable-next-line vue/multi-word-component-names
  name: "Vips"
}
</script>

<style scoped>

</style>
</file>

<file path="hx-mobel-vue/src/main.js">
import Vue from 'vue'

import App from './App.vue'
import store from '../vuex/store'
import router from '../route/router.js'
import Vant from 'vant';
import 'vant/lib/index.css';

Vue.use(Vant);
Vue.config.productionTip = false
import axios from "axios";

// 设置API基础URL - 使用相对路径
axios.defaults.baseURL = '';

// 配置请求拦截器
axios.interceptors.request.use(config => {
  // 如果有token，添加到请求头
  const token = window.localStorage.getItem('token');
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
}, error => {
  return Promise.reject(error);
});

// 配置响应拦截器
axios.interceptors.response.use(response => {
  // 直接返回响应数据
  return response;
}, error => {
  // 处理错误响应
  if (error.response && error.response.status === 401) {
    // 未授权，跳转到登录页
    router.push('/login');
  }
  return Promise.reject(error);
});

// 将axios挂载到Vue原型上
Vue.prototype.$http = axios

// 路由守卫，检查登录状态
router.beforeEach((to, from, next) => {
  if (to.meta.isLogin) {  // 判断该路由是否需要登录权限
    if (window.localStorage.getItem('Flag')) {  // 通过localStorage获取当前的登录状态
      next();
    }
    else {
      next({
        path: '/login',
      })
    }
  }
  else {
    next();
  }
});

// 挂载Vue实例
new Vue({
  store,
  router,
  render: h => h(App),
}).$mount('#app')
</file>

<file path="hx-mobel-vue/vuex/store.js">
import Vuex from 'vuex'
import Vue from 'vue'
// 使用安装
Vue.use(Vuex)
// 初始化
const store = new Vuex.Store({
// 设置属性
    state: {
        isLogin: false,
    },

    // 获取属性的状态
    getters: {
        //获取登录状态
        isLogin: state => state.isLogin,
    },

    // 设置属性状态
    mutations: {
        //保存登录状态
        userStatus(state, flag) {
            state.isLogin = flag
        },
    },

    // 应用mutations
    actions: {
        //获取登录状态
        userLogin({commit}, flag) {
            commit("userStatus", flag)
        },
    }
})
export default store
</file>

<file path="hx-pc-vue/babel.config.js">
module.exports = {
  presets: [
    '@vue/cli-plugin-babel/preset'
  ]
}
</file>

<file path="hx-pc-vue/jsconfig.json">
{
  "compilerOptions": {
    "target": "es5",
    "module": "esnext",
    "baseUrl": "./",
    "moduleResolution": "node",
    "paths": {
      "@/*": [
        "src/*"
      ]
    },
    "lib": [
      "esnext",
      "dom",
      "dom.iterable",
      "scripthost"
    ]
  }
}
</file>

<file path="hx-pc-vue/package.json">
{
  "name": "hx-moble-vue",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "serve": "vue-cli-service serve",
    "build": "vue-cli-service build",
    "lint": "vue-cli-service lint"
  },
  "dependencies": {
    "axios": "^1.3.6",
    "core-js": "^3.8.3",
    "element-ui": "^2.15.13",
    "vue": "^2.6.14",
    "vue-router": "^3.5.2",
    "vuex": "^3.6.2"
  },
  "devDependencies": {
    "@babel/core": "^7.12.16",
    "@babel/eslint-parser": "^7.12.16",
    "@vue/cli-plugin-babel": "~5.0.0",
    "@vue/cli-plugin-eslint": "~5.0.0",
    "@vue/cli-service": "~5.0.0",
    "eslint": "^7.32.0",
    "eslint-plugin-vue": "^8.0.3",
    "vue-template-compiler": "^2.6.14"
  },
  "eslintConfig": {
    "root": true,
    "env": {
      "node": true
    },
    "extends": [
      "plugin:vue/essential",
      "eslint:recommended"
    ],
    "parserOptions": {
      "parser": "@babel/eslint-parser"
    },
    "rules": {}
  },
  "browserslist": [
    "> 1%",
    "last 2 versions",
    "not dead"
  ]
}
</file>

<file path="hx-pc-vue/public/index.html">
<!DOCTYPE html>
<html lang="">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <link rel="icon" href="<%= BASE_URL %>favicon.ico">
    <title><%= htmlWebpackPlugin.options.title %></title>
  </head>
  <body>
    <noscript>
      <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled. Please enable it to continue.</strong>
    </noscript>
    <div id="app"></div>
    <!-- built files will be auto injected -->
  </body>
</html>
</file>

<file path="hx-pc-vue/README.md">
# vue pc端 脚手架 内置 路由 vuex 登录 路由拦截 element-ui

## Project setup
```
npm install
```

### Compiles and hot-reloads for development
```
npm run serve
```

### Compiles and minifies for production
```
npm run build
```

### Lints and fixes files
```
npm run lint
```

### Customize configuration
See [Configuration Reference](https://cli.vuejs.org/config/).
</file>

<file path="hx-pc-vue/route/router.js">
import Vue from 'vue';
import VueRouter from 'vue-router';
import Index from "@/components/Index.vue";
import Login from "@/components/Login.vue";
//第三方库需要use一下才能用
Vue.use(VueRouter)
//引入组件


//定义routes路由的集合，数组类型
const routes=[

//单个路由均为对象类型，path代表的是路径，component代表组件
    {
        // 登录
        path: '/login',
        component: Login,
        meta: {
            isLogin: false
        }
    },
    {
        // 登录
        path: '/',
        component: Login,
        meta: {
            isLogin: false
        }
    },
    {

        path: '/index',
        component: Index,
        meta: {
            isLogin: true
        }
    }
//     {path:'/page1',component:page1},
//     {path:"/page2",component:page2},
//     //可以配置重定向
//     // {path:'',redirect:"page1"}
//     //或者重新写个路径为空的路由
//     {path:"",component:page1}
]
//实例化VueRouter并将routes添加进去
const router=new VueRouter({
    mode: 'history',
//ES6简写，等于routes：routes
    routes
});
//抛出这个这个实例对象方便外部读取以及访问
export default router
</file>

<file path="hx-pc-vue/src/App.vue">
<template>
  <div id="app">
    <router-view></router-view>
<!--    <Login msg="Welcome to Your Vue.js App"/>-->
  </div>
</template>

<script>


export default {
  name: 'App',
  components: {

  }
}
</script>

<style>
#app {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-align: center;
  color: #2c3e50;
  margin-top: 60px;
}
</style>
</file>

<file path="hx-pc-vue/src/components/demo/MyIndex.vue">
<template>
  <div>


  </div>

</template>


<script>
export default {
  name: "MyIndex"
}
</script>


<style scoped>

</style>
</file>

<file path="hx-pc-vue/src/components/FindVip.vue">
<template>
  <div>
    查找会员
    <el-autocomplete
        v-model="name"
        :fetch-suggestions="querySearchAsync"
        placeholder="请输入内容"
        value-key="name"
    ></el-autocomplete>
    <el-button type="primary" @click="getVipsByName">查找</el-button>

    <el-dialog
        title="提示"
        :visible.sync="dialogVisible">

      <el-table
          :data="result"
          style="width: 100%">
        <el-table-column
            prop="name"
            label="姓名"
            width="180">
        </el-table-column>
        <el-table-column
            prop="phone"
            label="手机号"
            width="180">
        </el-table-column>
        <el-table-column
            prop="maintainer.name"
            label="维护人">
        </el-table-column>
      </el-table>
      <span slot="footer" class="dialog-footer">
    <el-button @click="dialogVisible = false">取 消</el-button>
    <el-button type="primary" @click="dialogVisible = false">确 定</el-button>
  </span>
    </el-dialog>
  </div>
</template>

<script>
import { vipApi } from '../services/api';

export default {
  name: "FindVip",
  data() {
    return {
      dialogVisible: false,
      restaurants: [],
      name: '',
      result: []
    }
  },
  methods: {
    querySearchAsync(queryString, cb) {
      vipApi.findVipsByNameLike(this.name).then(data => {
        this.restaurants = data
        cb(this.restaurants);
      })
    },
    getVipsByName() {
      vipApi.getVipsByName(this.name).then(data => {
        console.log(data)
        this.result = data
        this.dialogVisible = true
      })
    }
  },
}
</script>

<style scoped>

</style>
</file>

<file path="hx-pc-vue/src/components/Index.vue">
<template>
<div>
 <MyTable></MyTable>
</div>
</template>

<script>
/* eslint-disable vue/multi-word-component-names */
import MyTable from "@/components/MyTable.vue";

export default {
  name: "Index",
  components: {MyTable}
}
</script>

<style scoped>

</style>
</file>

<file path="hx-pc-vue/src/components/Login.vue">
<template>
  <div class="login">
    <el-form ref="loginForm" :model="loginForm"  class="login-form">
      <h3 class="title">和信后台管理系统</h3>
      <el-form-item prop="username">
        <el-input
            v-model="loginForm.name"
            type="text"
            auto-complete="off"
            placeholder="账号"
        >

        </el-input>
      </el-form-item>
      <el-form-item prop="password">
        <el-input
            v-model="loginForm.password"
            type="password"
            auto-complete="off"
            placeholder="密码"
        >
        </el-input>
      </el-form-item>

<!--      <el-checkbox v-model="loginForm.rememberMe" style="margin:0px 0px 25px 0px;">记住密码</el-checkbox>-->
      <el-form-item style="width:100%;">
        <el-button
            :loading="loading"
            size="medium"
            type="primary"
            style="width:100%;"
            @click="handleLogin"
        >
          <span v-if="!loading">登 录</span>
          <span v-else>登 录 中...</span>
        </el-button>
<!--        <div style="float: right;" v-if="register">-->
<!--          <router-link class="link-type" :to="'/register'">立即注册</router-link>-->
<!--        </div>-->
      </el-form-item>
    </el-form>
  </div>
</template>

<script>
import { userApi } from '../services/api';

export default {
  // eslint-disable-next-line vue/multi-word-component-names
  name: 'Login',
  props: {
    msg: String
  },
  data(){
    return{
      loginForm:{
        name:'admin',
        password:'admin',
        // rememberMe:false
      },
      loading:false
    }
  },
  methods:{
    handleLogin(){
      this.loading = true;
      
      // 使用mock数据进行本地验证（开发阶段）
      if (this.loginForm.name=='admin'&&this.loginForm.password=='admin'){
        //设置Vuex登录标志为true，默认userLogin为false
        this.$store.dispatch("userLogin", true);
        //Vuex在用户刷新的时候userLogin会回到默认值false，所以我们需要用到HTML5储存
        //我们设置一个名为Flag，值为isLogin的字段，作用是如果Flag有值且为isLogin的时候，证明用户已经登录了。
        localStorage.setItem("Flag", "isLogin");
        //登录成功后跳转到指定页面
        this.$router.push("/index");
        this.loading = false;
        return;
      }
      
      // 使用API服务层进行登录请求
      userApi.login(this.loginForm).then(data => {
        if (!data) {
          this.$message.error('密码错误或账号不存在');
        } else {
          //设置Vuex登录标志为true，默认userLogin为false
          this.$store.dispatch("userLogin", true);
          //保存登录状态和用户ID
          localStorage.setItem("Flag", "isLogin");
          localStorage.setItem("UserId", data.id);
          //登录成功后跳转到指定页面
          this.$router.push("/index");
        }
      }).catch(error => {
        console.error('登录失败:', error);
        this.$message.error('登录失败，请检查网络连接');
      }).finally(() => {
        this.loading = false;
      });
    }
  }
}
</script>

<!-- Add "scoped" attribute to limit CSS to this component only -->
<style scoped>
.login {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100%;
  /*background-image: url("../assets/images/login-background.jpg");*/
  background-size: cover;
}
.login-form {
  border-radius: 6px;
  background: #ffffff;
  width: 400px;
  padding: 25px 25px 5px 25px;
}
</style>
</file>

<file path="hx-pc-vue/vue.config.js">
const { defineConfig } = require('@vue/cli-service')
module.exports = defineConfig({
  transpileDependencies: true,
  // 开发服务器配置
  devServer: {
    port: 8080, // 前端服务端口
    open: true, // 自动打开浏览器
    // 配置代理，解决跨域问题
    proxy: {
      '/api': {
        target: 'http://127.0.0.1:8090', // 后端服务地址
        changeOrigin: true, // 开启代理
        pathRewrite: {
          '^/api': '/api' // 不重写路径
        }
      }
    }
  }
})
</file>

<file path="hx-pc-vue/vuex/store.js">
import Vuex from 'vuex'
import Vue from 'vue'
// 使用安装
Vue.use(Vuex)
// 初始化
const store = new Vuex.Store({
// 设置属性
    state: {
        isLogin: false,
    },

    // 获取属性的状态
    getters: {
        //获取登录状态
        isLogin: state => state.isLogin,
    },

    // 设置属性状态
    mutations: {
        //保存登录状态
        userStatus(state, flag) {
            state.isLogin = flag
        },
    },

    // 应用mutations
    actions: {
        //获取登录状态
        userLogin({commit}, flag) {
            commit("userStatus", flag)
        },
    }
})
export default store
</file>

<file path="hx-api/pom.xml">
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.7.9</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.example</groupId>
    <artifactId>hx-api</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>shouba</name>
    <description>shouba</description>
    <properties>
        <java.version>1.8</java.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-starter</artifactId>
            <version>1.2.1</version>
        </dependency>
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>2.3.0</version>
        </dependency>
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.73</version>
        </dependency>
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.30</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>commons-lang</groupId>
            <artifactId>commons-lang</artifactId>
            <version>2.6</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml -->
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml</artifactId>
            <version>5.0.0</version>
        </dependency>
        <dependency>
            <groupId>com.dtflys.forest</groupId>
            <artifactId>forest-spring-boot-starter</artifactId>
            <version>1.5.28</version>
        </dependency>

        <!-- PageHelper Spring Boot Starter -->
        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper-spring-boot-starter</artifactId>
            <version>1.4.6</version> <!-- 你可以检查并使用最新的兼容版本 -->
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>
</file>

<file path="hx-api/src/main/resources/application.yml">
spring:
  profiles:
    active: dev
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://101.42.104.145:3306/hx?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&useSSL=false
    username: root
    password: miaoshidahu
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      # 初始化大小，最小，最大
      initial-size: 5
      min-idle: 5
      max-active: 20
      # 连接等待超时时间
      max-wait: 60000
      # 配置检测间隔时间，检测需要关闭的空闲连接
      time-between-eviction-runs-millis: 60000
      # 配置连接在池中最小生存的时间
      min-evictable-idle-time-millis: 300000
      # 用来检测连接是否有效的sql
      validation-query: SELECT 1 FROM DUAL
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      # 打开PSCache，指定每个连接PSCache的大小
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 20
      # 监控统计拦截的filters
      filters: stat,wall,log4j2
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      # 合并多个DruidDataSource的监控数据
      use-global-data-source-stat: true
      # 配置web监控
      web-stat-filter:
        enabled: true
      stat-view-servlet:
        enabled: true
        login-username: admin
        login-password: admin

server:
  port: 8090

forest:
  # 启用Forest日志
  log-enabled: true
  # 日志配置在各环境配置中单独设置
  # 连接池配置调整为合理值
  max-connections: 200
  max-route-connections: 100
  max-request-queue-size: 100
  max-async-thread-size: 50
  max-async-queue-size: 100
  timeout: 30000

# 应用自定义配置
hx:
  api:
    baseUrl: http://101.43.69.26:9129
    token-id: 443842AC-E352-4AD0-B454-9671585E16EB
    db-name: xerp_qxhexingxc
    business-id: 255982

# 单独为 Forest 定义 baseUrl (与 application-dev.yml 保持一致)
hxApiBaseUrl: http://101.43.69.26:9129
</file>

<file path="hx-api/src/test/java/com/example/hx_api/ShoubaApplicationTests.java">
package com.example.hx_api;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.example.hx_api.Api.*;
import com.example.hx_api.Controller.Controller;
import com.example.hx_api.Dao.DeptDao;
import com.example.hx_api.Dao.UserDao;
import com.example.hx_api.Dao.VipDao;
import com.example.hx_api.Demo.Spider;
import com.example.hx_api.Demo.Vip_;
import com.example.hx_api.Demo.Vip_Dao;
import com.example.hx_api.PoJo.Vip;
import com.example.hx_api.Service.UpDate;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.BeanFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

@SpringBootTest
class ShoubaApplicationTests {
    @Autowired
    Api api;
    @Autowired
    用户列表请求参数 a;
    @Autowired
    销售信息请求参数 b;

    @Autowired
    UserDao userDao;
    @Autowired
    DeptDao deptDao;
    @Autowired
    UpDate upDate;
    @Autowired
    Controller controller;
    @Autowired
    VipDao vipDao;

    @Autowired
    BeanFactory beanFactory;
    @Autowired
    Vip_Dao vip_dao;


    @Test
    void contextLoads()  {
//        int hyid=84106;
//        JSONObject demo = api.demo(new 会员详情参数(hyid));
//        JSONArray info = demo.getJSONObject("MESSAGE").getJSONArray("VIPINFO");
//        for (Object o : info) {
//            //更新未消费天数
//            if (( (JSONObject)o).getString("FIELD").equals("D_LASTBUY")){
//                int value = ((JSONObject) o).getIntValue("VALUE");
//                System.out.println(value);
//
//            }
//            //更新积分
//            if (( (JSONObject)o).getString("FIELD").equals("N_ALLVALUE")){
//                int value = ((JSONObject) o).getIntValue("VALUE");
//                System.out.println(value);
//            }
//
//        }
//        upDate.start();


        用户列表请求参数 a = new 用户列表请求参数();


        for (int i = 0; i < 3; i++) {

            a.demo(i);
            响应 用户列表 = api.用户列表(a);
            System.out.println(用户列表);
//            获取id和名字
            for (Object o : 用户列表.getMESSAGE()) {
                JSONObject messageObject = (JSONObject) o;
                int hyid= messageObject.getIntValue("HYID");
                String name=messageObject.getString("C_NAME");
                int 当前积分 = messageObject.getIntValue("n_value");
                //            获取rfm值
                JSONObject demo1 = api.demo(new RFM参数(hyid));
                JSONObject message = demo1.getJSONArray("MESSAGE").getJSONObject(0);
                int R=message.getIntValue("rvalue");
                int F=message.getIntValue("fvalue");
                int M=message.getIntValue("mvalue");
                String phone = message.getString("C_MOBILE");
                System.out.println(name+'\t'+phone+'\t'+当前积分+'\t'+R+'\t'+F+'\t'+M);
                //Vip_ vip = new Vip_(hyid, name, R, F, M, phone);
                //vip_dao.add(vip);
            }

        }



    }
    @Test
    void a()  {
        ArrayList<Vip> vipsByDept = vipDao.getVipsByDept();

        for (Vip vip : vipsByDept) {

            JSONObject demo1 = api.demo(new 当前积分(vip.hyid));
            JSONArray jsonArray = demo1.getJSONObject("MESSAGE").getJSONArray("VIPINFO");
            int 当前积分=0;
            for (Object o : jsonArray) {
                JSONObject messageObject = (JSONObject) o;
                if (messageObject.getString("NAME").equals("当前积分")){
                    当前积分=messageObject.getIntValue("VALUE");
                }
            }
            if (当前积分>=5000){
                System.out.println(vip.name+'\t'+vip.phone+'\t'+当前积分+'\t'+vip.R+'\t'+vip.F+'\t'+vip.M);
            }

        }


    }

}
</file>

<file path="hx-mobel-vue/vue.config.js">
const { defineConfig } = require('@vue/cli-service')
module.exports = defineConfig({
  transpileDependencies: true,
  devServer: {
    host: '0.0.0.0',
    // https:true,
    port: 8081,
    // client: {
    //   webSocketURL: 'ws://0.0.0.0:8081/ws',
    // },
    headers: {
      'Access-Control-Allow-Origin': '*',
    },
    historyApiFallback: true,
    allowedHosts: 'all',
    // 配置代理，解决跨域问题
    proxy: {
      '/api': {
        target: 'http://127.0.0.1:8090', // 后端服务地址
        changeOrigin: true, // 开启代理
        pathRewrite: {
          '^/api': '/api' // 不重写路径
        }
      }
    }
  }
})
</file>

<file path="hx-pc-vue/src/components/MyTable.vue">
<template>
  <div class="vip-system">
    <h2 class="system-title">会员维护系统</h2>

    <div class="main-layout">
      <!-- 左侧部门树 -->
      <div class="sidebar">
        <div class="panel-container">
          <div class="panel-header">
            <i class="el-icon-s-fold"></i>
            <span>部门组织</span>
          </div>
          <div v-loading="loadingDept" class="panel-body">
            <el-tree
                :data="deptOptions"
                :props="defaultProps"
                :expand-on-click-node="false"
                ref="tree"
                node-key="id"
                default-expand-all
                highlight-current
                @node-click="handleNodeClick"
                :allow-drop="allowDrop"
                :allow-drag="allowDrag"
                draggable
                @node-drop="nodeDrop"
                empty-text="暂无部门数据"
            />
          </div>
        </div>
      </div>

      <!-- 右侧内容区 -->
      <div class="main-content">
        <!-- 会员查找组件 -->
        <div class="panel-container">
          <div class="panel-header">
            <i class="el-icon-search"></i>
            <span>会员查找</span>
          </div>
          <div class="panel-body">
            <FindVip></FindVip>
          </div>
        </div>

        <!-- 部门统计表 -->
        <div v-if="NodeUser==null && deptUserOption.length>0" class="panel-container">
          <div class="panel-header">
            <i class="el-icon-s-data"></i>
            <span>部门统计</span>
          </div>
          <div class="panel-body" v-loading="loadingDeptStats">
            <el-table
                :data="deptUserOption"
                style="width: 100%"
                border
                stripe
                highlight-current-row
                show-summary>
              <el-table-column
                  prop="name"
                  label="姓名"
                  width="180">
              </el-table-column>
              <el-table-column
                  prop="念念不忘"
                  label="念念不忘"
                  width="180">
              </el-table-column>
              <el-table-column
                  prop="好久不见"
                  label="好久不见"
                  width="180">
              </el-table-column>
            </el-table>
          </div>
        </div>

        <!-- 会员列表区域 -->
        <div v-if="NodeUser!=null" class="member-area">
          <!-- 员工信息面板 -->
          <div class="employee-info-container">
            <!-- 员工信息卡片 -->
            <div class="employee-card">
              <div class="employee-header">
                <i class="el-icon-user"></i>
                <span>员工信息</span>
              </div>
              <div class="employee-content">
                <div class="employee-name">{{ NodeUser.name }}</div>
                <div class="employee-actions">
                  <el-button type="primary" size="small" icon="el-icon-edit" @click="UserFormShow = true">修改账号</el-button>
                  <el-button type="success" size="small" icon="el-icon-plus" @click="VipFindShow = true">添加会员</el-button>
                </div>
              </div>
            </div>
            
            <!-- 念念不忘统计卡片 -->
            <div class="stat-card" :class="{ 'active': type }">
              <div class="stat-header">
                <span>念念不忘</span>
                <el-tag v-if="type" type="danger" effect="dark">当前</el-tag>
              </div>
              <div class="stat-value">{{ 念念不忘数量 }}</div>
            </div>
            
            <!-- 好久不见统计卡片 -->
            <div class="stat-card" :class="{ 'active': !type }">
              <div class="stat-header">
                <span>好久不见</span>
                <el-tag v-if="!type" type="primary" effect="dark">当前</el-tag>
              </div>
              <div class="stat-value">{{ 好久不见数量 }}</div>
            </div>
          </div>

          <!-- 会员列表 -->
          <div class="vip-list-panel panel-container">
            <div class="panel-header">
              <div class="panel-title">
                <i class="el-icon-s-custom"></i>
                <span>{{ table_title }}列表</span>
              </div>
              <div class="panel-actions">
                <span>切换表格：</span>
                <el-switch
                    v-model="type"
                    @change="type_change"
                    active-color="#ff4949"
                    inactive-color="#409EFF"
                    active-text="念念不忘"
                    inactive-text="好久不见">
                </el-switch>
              </div>
            </div>
            <div class="panel-body" v-loading="loadingVips">
              <el-table
                  :data="vips"
                  border
                  stripe
                  highlight-current-row
                  style="width: 100%"
                  @sort-change="handleSortChange" 
                  :default-sort = "{prop: 'm', order: 'descending'}"
                  empty-text="暂无数据" 
              >
                <el-table-column label="序号" width="80" align="center">
                  <template slot-scope="scope">
                    {{ (currentPage - 1) * pageSize + scope.$index + 1 }}
                  </template>
                </el-table-column>
                <el-table-column prop="name" label="会员名" sortable="custom" align="center"></el-table-column>
                <el-table-column prop="phone" label="手机号" align="center"></el-table-column>
                <el-table-column prop="age" label="年龄" sortable="custom" align="center" width="100"></el-table-column>
                <el-table-column prop="points" label="积分" sortable="custom" align="center" width="100"></el-table-column>
                <el-table-column prop="nonConsumptionDays" label="未消费天数" sortable="custom" align="center" width="120"></el-table-column>
                <el-table-column prop="r" label="R" align="center" width="80"
                  :filters="[{text: 5, value: 5}, {text: 4, value: 4}, {text: 3, value: 3}, {text: 2, value: 2}, {text: 1, value: 1}]" 
                  :filter-method="filterHandler" 
                  sortable="custom">
                  <template slot-scope="scope">
                    <el-tag :type="getTagType(scope.row.r)" size="medium">{{ scope.row.r }}</el-tag>
                  </template>
                </el-table-column>
                <el-table-column prop="f" label="F" align="center" width="80"
                  :filters="[{text: 5, value: 5}, {text: 4, value: 4}, {text: 3, value: 3}, {text: 2, value: 2}, {text: 1, value: 1}]" 
                  :filter-method="filterHandler" 
                  sortable="custom">
                  <template slot-scope="scope">
                    <el-tag :type="getTagType(scope.row.f)" size="medium">{{ scope.row.f }}</el-tag>
                  </template>
                </el-table-column>
                <el-table-column prop="m" label="M" align="center" width="80"
                  :filters="[{text: 5, value: 5}, {text: 4, value: 4}, {text: 3, value: 3}, {text: 2, value: 2}, {text: 1, value: 1}]" 
                  :filter-method="filterHandler" 
                  sortable="custom">
                  <template slot-scope="scope">
                    <el-tag :type="getTagType(scope.row.m)" size="medium">{{ scope.row.m }}</el-tag>
                  </template>
                </el-table-column>
                <el-table-column prop="address" label="地址" sortable="custom" show-overflow-tooltip></el-table-column>
                <el-table-column prop="createTime" label="创建时间" :formatter="formatDateOnly" sortable="custom" width="120" align="center"></el-table-column>
                <el-table-column label="操作" width="200" align="center" fixed="right">
                  <template slot-scope="scope">
                    <el-button-group>
                      <el-button @click.native.prevent="OpenSetVip(scope.row)" type="primary" icon="el-icon-edit" size="small">修改</el-button>
                      <el-button @click.native.prevent="OpenMoveVip(scope.row)" type="warning" icon="el-icon-share" size="small">转移</el-button>
                      <el-button @click.native.prevent="confirmDelVip(scope.row)" type="danger" icon="el-icon-delete" size="small">删除</el-button>
                    </el-button-group>
                  </template>
                </el-table-column>
              </el-table>
              
              <!-- 分页组件 -->
              <el-pagination
                  class="pagination"
                  @size-change="handleSizeChange"
                  @current-change="handleCurrentChange"
                  :current-page="currentPage"
                  :page-sizes="[10, 20, 50, 100]"
                  :page-size="pageSize"
                  background
                  layout="total, sizes, prev, pager, next, jumper"
                  :total="totalItems">
              </el-pagination>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- 弹窗组件 -->
    <!-- 员工账号变更 -->
    <el-dialog title="员工账号变更" :visible.sync="UserFormShow" width="30%" center>
      <el-form :model="user_form" label-position="right" label-width="80px">
        <el-form-item label="用户名">
          <el-input v-model="user_form.name" autocomplete="off" placeholder="请输入用户名"></el-input>
        </el-form-item>
        <el-form-item label="密码">
          <el-input v-model="user_form.password" autocomplete="off" placeholder="请输入密码" show-password></el-input>
        </el-form-item>
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button @click="UserFormShow = false">取 消</el-button>
        <el-button type="primary" @click="setUser" :loading="submittingUser">确 定</el-button>
      </div>
    </el-dialog>

    <!-- 输入手机号查找会员 -->
    <el-dialog title="输入手机号查找会员" :visible.sync="VipFindShow" width="30%" center>
      <el-form :model="vip_form" label-position="right" label-width="80px">
        <el-form-item label="手机号">
          <el-input v-model="vip_form.phone_search" autocomplete="off" placeholder="请输入手机号" maxlength="11"></el-input>
        </el-form-item>
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button @click="VipFindShow = false">取 消</el-button>
        <el-button type="primary" @click="FindVipByPhone" :loading="searchingVip">搜 索</el-button>
      </div>
    </el-dialog>

    <!-- 会员转移窗口 -->
    <el-dialog title="请选择转移到哪个员工账号" :visible.sync="VipMoveShow" width="30%" center>
      <div class="move-vip-form">
        <p class="move-vip-info">会员：<el-tag>{{ VipMoveForm.Vip.name }}</el-tag></p>
        <el-cascader
            v-model="VipMoveForm.targetUserId"
            :props="defaultProps"
            :options="deptOptions"
            placeholder="请选择目标员工"
            style="width: 100%"
        ></el-cascader>
      </div>
      <div slot="footer" class="dialog-footer">
        <el-button @click="VipMoveShow = false">取 消</el-button>
        <el-button type="primary" @click="confirmMoveVip" :loading="movingVip" :disabled="!VipMoveForm.targetUserId || VipMoveForm.targetUserId.length < 2">
          确 定
        </el-button>
      </div>
    </el-dialog>

    <!-- 会员列表选择窗口 -->
    <el-dialog title="找到的会员" :visible.sync="VipListShow" width="40%" center>
      <el-table
          :data="FindVipList"
          border
          stripe
          highlight-current-row
          style="width: 100%"
          v-loading="loadingVipList">
        <el-table-column
            prop="C_NAME"
            label="姓名"
            width="120">
        </el-table-column>
        <el-table-column
            prop="C_MOBILE"
            label="手机号"
            width="120">
        </el-table-column>
        <el-table-column
            prop="INFO"
            label="信息"
            show-overflow-tooltip>
        </el-table-column>
        <el-table-column label="操作" width="100" align="center">
          <template slot-scope="scope">
            <el-button
                type="primary"
                size="small"
                icon="el-icon-check"
                @click="choose_vip_from_search(scope.row)">选择</el-button>
          </template>
        </el-table-column>
      </el-table>
      <div slot="footer" class="dialog-footer" v-if="FindVipList.length === 0">
        <span class="text-muted">未找到会员信息</span>
      </div>
    </el-dialog>

    <!-- 会员信息详情窗口 (用于添加) -->
    <el-dialog title="添加会员" :visible.sync="VipFormShow" width="40%" center>
      <el-form :model="vip_form_detail" label-position="right" label-width="100px">
        <div class="form-row">
          <el-form-item label="会员名" class="form-item">
            <el-input v-model="vip_form_detail.name" autocomplete="off" :disabled="true"></el-input>
          </el-form-item>
          <el-form-item label="手机号" class="form-item">
            <el-input v-model="vip_form_detail.phone" :disabled="true" autocomplete="off"></el-input>
          </el-form-item>
        </div>
        <div class="form-row">
          <el-form-item label="年龄" class="form-item">
            <el-select v-model="vip_form_detail.age" placeholder="请选择" style="width: 100%">
              <el-option
                  v-for="item in ageOptions"
                  :key="item"
                  :label="item"
                  :value="item">
              </el-option>
            </el-select>
          </el-form-item>
          <el-form-item label="积分" class="form-item">
            <el-input v-model="vip_form_detail.points" autocomplete="off" :disabled="true"></el-input>
          </el-form-item>
        </div>
        <el-form-item label="未消费天数">
          <el-input v-model="vip_form_detail.nonConsumptionDays" :disabled="true" autocomplete="off"></el-input>
        </el-form-item>
        <el-form-item label="地址">
          <el-input v-model="vip_form_detail.address" autocomplete="off"></el-input>
        </el-form-item>
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button @click="VipFormShow = false">取 消</el-button>
        <el-button type="primary" @click="confirmAddVip" :loading="addingVip">确 定</el-button>
      </div>
    </el-dialog>

    <!-- 会员修改窗口 -->
    <el-dialog title="会员修改" :visible.sync="VipSetShow" width="40%" center>
      <el-form :model="setVipInfoForm" label-position="right" label-width="80px">
        <div class="form-row">
          <el-form-item label="姓名" class="form-item">
            <el-input v-model="setVipInfoForm.name" autocomplete="off"></el-input>
          </el-form-item>
          <el-form-item label="年龄" class="form-item">
            <el-select v-model="setVipInfoForm.age" placeholder="请选择" style="width: 100%">
              <el-option
                  v-for="item in ageOptions"
                  :key="item"
                  :label="item"
                  :value="item">
              </el-option>
            </el-select>
          </el-form-item>
        </div>
        <el-form-item label="地址">
          <el-input v-model="setVipInfoForm.address" autocomplete="off"></el-input>
        </el-form-item>
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button @click="VipSetShow = false">取 消</el-button>
        <el-button type="primary" @click="confirmSetVip" :loading="updatingVip">提 交</el-button>
      </div>
    </el-dialog>
  </div>
</template>

<script>
import FindVip from "@/components/FindVip.vue";
import { deptApi, vipApi, userApi } from '@/services/api.js';

export default {
  name: "MyTable",
  components: {FindVip},
  created() {
    this.getCascadeDept();
    // 设置默认排序，并初次加载数据
    this.sortProp = 'm'; // 对应 prop="m"
    this.sortOrder = 'desc'; // descending
    // this.loadCurrentVips(); // handleNodeClick 或 type_change 会在 NodeUser 确定后调用
  },
  data() {
    return {
      // 加载状态
      loadingDept: false,
      loadingDeptStats: false,
      loadingVips: false,
      loadingVipList: false,
      submittingUser: false,
      searchingVip: false,
      addingVip: false,
      updatingVip: false,
      movingVip: false,

      vips: [],
      currentPage: 1, 
      pageSize: 10, 
      totalItems: 0, 
      sortProp: 'm', // 默认排序列
      sortOrder: 'desc', // 默认排序顺序 asc/desc
      user_form: { id: '', name: '', password: '' },
      vip_form_detail: {
        hyid: '',
        phone: '',
        name: '',
        age: '',
        points: '',
        nonConsumptionDays: '',
        address: '',
      },
      vip_form: {
        phone_search: ''
      },
      UserFormShow: false,
      VipFormShow: false,
      VipFindShow: false,
      VipListShow: false,
      VipSetShow: false,
      VipMoveShow: false,
      FindVipList: [],
      deptOptions: [],
      ageOptions: ['60后', '70后', '80后', '90后', '00后', '未知'],
      defaultProps: { label: 'name', value: 'id', children: 'users' },
      type: true,
      table_title: '念念不忘',
      NodeUser: null,
      念念不忘数量: '',
      好久不见数量: '',
      deptUserOption: [],
      setVipInfoForm: {},
      VipMoveForm: { Vip: {}, targetUserId: null }
    }
  },
  methods: {
    // 获取标签类型
    getTagType(value) {
      switch(value) {
        case 5: return 'success';
        case 4: return 'info';
        case 3: return '';
        case 2: return 'warning';
        case 1: return 'danger';
        default: return '';
      }
    },
    handleSortChange({  prop, order }) {
      this.sortProp = prop;
      if (order === 'ascending') {
        this.sortOrder = 'asc';
      } else if (order === 'descending') {
        this.sortOrder = 'desc';
      } else { // 取消排序或未知
        this.sortProp = 'm'; // 恢复默认排序或置空
        this.sortOrder = 'desc';
      }
      this.currentPage = 1; // 排序改变，回到第一页
      this.loadCurrentVips();
    },
    formatDateOnly(row, column, cellValue) {
      if (!cellValue) {
        return '';
      }
      const date = new Date(cellValue);
      const year = date.getFullYear();
      const month = (date.getMonth() + 1).toString().padStart(2, '0');
      const day = date.getDate().toString().padStart(2, '0');
      return `${year}-${month}-${day}`;
    },
    filterHandler(value, row, column) {
      const property = column['property'];
      return row[property] === value;
    },
    async confirmMoveVip() {
      if (!this.VipMoveForm.Vip || !this.VipMoveForm.targetUserId || this.VipMoveForm.targetUserId.length < 2) {
        this.$message.error('请选择要转移的会员和目标员工');
        return;
      }
      const vipId = this.VipMoveForm.Vip.id;
      const targetMaintainerId = this.VipMoveForm.targetUserId[1];

      this.$confirm('确定转移该会员?', '提示', {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning'
      }).then(async () => {
        try {
          this.movingVip = true;
          const success = await vipApi.moveVip(vipId, targetMaintainerId);
          this.movingVip = false;
          if (success) {
            this.VipMoveShow = false;
            this.VipMoveForm.targetUserId = null;
            this.$message.success('转移成功!');
            this.refreshCurrentNodeVips(); 
          } else {
            this.$message.warning('转移失败，该会员可能已被目标员工维护');
          }
        } catch (error) {
          this.movingVip = false;
          console.error("转移VIP失败:", error);
          this.$message.error('转移VIP操作失败');
        }
      }).catch(() => {
        this.$message.info('已取消转移');
      });
    },
    OpenMoveVip(vip) {
      this.VipMoveForm.Vip = vip;
      this.VipMoveForm.targetUserId = null;
      this.VipMoveShow = true;
    },
    async confirmAddVip() {
      this.$confirm('是否确认添加该会员?', '提示', {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning'
      }).then(async () => {
        // 构建会员数据对象，确保数值字段正确转换为数字类型
        const vipDto = {
          hyid: parseInt(this.vip_form_detail.hyid, 10),
          name: this.vip_form_detail.name,
          age: this.vip_form_detail.age,
          points: parseInt(this.vip_form_detail.points, 10) || 0,
          phone: this.vip_form_detail.phone,
          nonConsumptionDays: parseInt(this.vip_form_detail.nonConsumptionDays, 10) || 0,
          address: this.vip_form_detail.address,
          maintainerId: this.NodeUser.id,
          // 添加默认的RFM值
          r: 3,
          f: 3,
          m: 3
        };
        
        // 验证必要字段
        if (isNaN(vipDto.hyid)) {
          this.$message.error('会员ID必须是有效数字');
          return;
        }
        
        try {
          this.addingVip = true;
          const success = await vipApi.addVip(vipDto);
          this.addingVip = false;
          this.VipFormShow = false;
          if (success) {
            this.$message.success('添加成功!');
            this.refreshCurrentNodeVips(); 
          } else {
            this.$message.warning('添加失败，会员可能已被添加或不符合校验规则');
          }
        } catch (error) {
          this.addingVip = false;
          console.error("添加VIP失败:", error);
          this.$message.error('添加VIP操作失败');
        }
      }).catch(() => {
        this.$message.info('已取消添加');
      });
    },
    async choose_vip_from_search(selectedVip) {
      try {
        // 保存基本信息
        this.vip_form_detail.hyid = selectedVip.HYID;
        this.vip_form_detail.name = selectedVip.C_NAME;
        this.vip_form_detail.phone = selectedVip.C_MOBILE;
        
        // 关闭会员列表弹窗，显示加载状态
        this.VipListShow = false;
        this.loadingVipList = true;
        
        // 调用API获取会员详情
        const detailResult = await vipApi.getVipDetailByHyid(selectedVip.HYID);
        this.loadingVipList = false;
        
        // 处理详情信息
        if (detailResult && detailResult.STATUS === 0 && detailResult.MESSAGE) {
          // MESSAGE直接是对象，不是数组
          const vipDetail = detailResult.MESSAGE;
          
          // 解析VIPINFO数组以获取具体字段值
          if (vipDetail.VIPINFO && Array.isArray(vipDetail.VIPINFO)) {
            for (const info of vipDetail.VIPINFO) {
              if (info.FIELD === 'D_LASTBUY') {
                this.vip_form_detail.nonConsumptionDays = info.VALUE || '';
              } else if (info.FIELD === 'N_ALLVALUE') {
                this.vip_form_detail.points = info.VALUE || '';
              }
            }
          }
        } else {
          // 如果详情获取失败，则使用搜索结果中的基本信息
          this.vip_form_detail.nonConsumptionDays = selectedVip.D_LASTBUY !== undefined ? selectedVip.D_LASTBUY : '';
          this.vip_form_detail.points = selectedVip.N_ALLVALUE !== undefined ? selectedVip.N_ALLVALUE : '';
          console.warn("获取会员详情失败，使用搜索结果中的基本信息");
        }
        
        // 清空需要用户填写的字段
        this.vip_form_detail.age = '';
        this.vip_form_detail.address = '';
        
        // 显示会员添加表单
        this.VipFormShow = true;
      } catch (error) {
        this.loadingVipList = false;
        console.error("获取会员详情失败:", error);
        this.$message.error('获取会员详情失败，请重试');
      }
    },
    async FindVipByPhone() {
      if (!this.vip_form.phone_search || this.vip_form.phone_search.trim() === '') {
        this.$message.warning('请输入手机号');
        return;
      }
      try {
        this.searchingVip = true;
        const resultJson = await vipApi.findVipsByPhoneNumber(this.vip_form.phone_search.trim());
        this.searchingVip = false;
        
        // 外部API成功时 STATUS 为 0
        if (resultJson && resultJson.STATUS === 0 && resultJson.MESSAGE && Array.isArray(resultJson.MESSAGE)) {
          if (resultJson.MESSAGE.length === 0) {
            this.$message.warning('没有找到会员, 请检查手机号是否正确');
            this.FindVipList = [];
          } else {
            this.FindVipList = resultJson.MESSAGE;
            this.VipFindShow = false; // 关闭查找输入框
            this.VipListShow = true;  // 显示会员列表弹窗
          }
        } else {
          // 处理查找失败或外部API返回错误状态的情况
          let errorMsg = '查找会员失败，请稍后再试'; // 默认错误消息
          if (resultJson && resultJson.MESSAGE) {
            if (typeof resultJson.MESSAGE === 'string') {
              errorMsg = resultJson.MESSAGE;
            } else if (Array.isArray(resultJson.MESSAGE) && resultJson.MESSAGE.length > 0) {
              // 尝试从 MESSAGE 数组的第一个对象中提取 INFO 或 ERROR_INFO
              const firstMessageItem = resultJson.MESSAGE[0];
              if (typeof firstMessageItem === 'object' && firstMessageItem !== null) {
                if (firstMessageItem.INFO) {
                  errorMsg = firstMessageItem.INFO;
                } else if (firstMessageItem.ERROR_INFO) {
                  errorMsg = firstMessageItem.ERROR_INFO;
                } else if (Object.keys(firstMessageItem).length > 0) {
                  // 如果有其他字段，可以考虑显示，或者用一个通用错误
                  // errorMsg = JSON.stringify(firstMessageItem); // 作为最后的手段
                }
              }
            }
          } else if (resultJson && resultJson.STATUS !== undefined) {
            errorMsg = `查找失败，状态码: ${resultJson.STATUS}`;
          }
          this.$message.error(errorMsg);
          this.FindVipList = [];
        }
      } catch (error) {
        this.searchingVip = false;
        console.error("FindVipByPhone 失败:", error);
        this.$message.error('搜索会员请求失败');
      }
    },
    async setUser() {
      const userDto = {
        id: this.NodeUser.id,
        name: this.user_form.name,
        password: this.user_form.password,
      };
      try {
        this.submittingUser = true;
        await userApi.updateUser(userDto);
        this.submittingUser = false;
        this.UserFormShow = false;
        this.$message.success('员工账户修改成功');
        this.getCascadeDept(); 
      } catch (error) {
        this.submittingUser = false;
        console.error("修改用户失败:", error);
        this.$message.error('修改用户操作失败');
      }
    },
    handleSizeChange(newSize) {
      this.pageSize = newSize;
      this.currentPage = 1; 
      this.loadCurrentVips();
    },
    handleCurrentChange(newPage) {
      this.currentPage = newPage;
      this.loadCurrentVips();
    },
    loadCurrentVips() {
      if (!this.NodeUser || !this.NodeUser.id) {
          this.vips = [];
          this.totalItems = 0;
          return;
      }
      if (this.type) {
        this.get念念不忘();
      } else {
        this.get好久不见();
      }
    },
    type_change() {
      this.currentPage = 1; 
      if (this.type) {
        this.table_title = '念念不忘';
      } else {
        this.table_title = '好久不见';
      }
      this.loadCurrentVips();
    },
    async getCascadeDept() {
      try {
        this.loadingDept = true;
        const data = await deptApi.getCascadeDept();
        this.deptOptions = data;
        this.loadingDept = false;
      } catch (error) {
        this.loadingDept = false;
        console.error("获取级联部门数据失败:", error);
        this.$message.error('获取部门数据失败');
        this.deptOptions = [];
      }
    },
    async getNum() { 
      if (!this.NodeUser || !this.NodeUser.id) {
        this.念念不忘数量 = 0;
        this.好久不见数量 = 0;
        return;
      }
      try {
        this.念念不忘数量 = await vipApi.getNeverForgetVipsCount(this.NodeUser.id);
        this.好久不见数量 = await vipApi.getLongTimeNoSeeVipsCount(this.NodeUser.id);
      } catch (error) {
        console.error("获取VIP数量统计失败:", error);
        this.$message.error('获取VIP数量统计失败');
        this.念念不忘数量 = 0;
        this.好久不见数量 = 0;
      }
    },
    async handleNodeClick(data) {
      this.currentPage = 1; 
      if (data.users !== undefined ) { 
        this.NodeUser = null;
        this.vips = [];
        this.totalItems = 0;
        try {
          this.loadingDeptStats = true;
          this.deptUserOption = await deptApi.getDeptStatsById(data.id);
          this.loadingDeptStats = false;
        } catch (error) {
          this.loadingDeptStats = false;
          console.error("获取部门统计数据失败:", error);
          this.$message.error('获取部门统计数据失败');
          this.deptUserOption = [];
        }
      } else { 
        this.NodeUser = data;
        this.deptUserOption = [];
        this.type_change(); 
        await this.getNum();
      }
    },
    async get念念不忘() {
      if (!this.NodeUser || !this.NodeUser.id) {
        this.vips = [];
        this.totalItems = 0;
        return;
      }
      try {
        this.loadingVips = true;
        const response = await vipApi.getNeverForgetVips(this.NodeUser.id, this.currentPage, this.pageSize, this.sortProp, this.sortOrder);
        this.loadingVips = false;
        
        if (response && typeof response.total !== 'undefined' && Array.isArray(response.list)) {
          this.vips = response.list;
          this.totalItems = response.total;
        } else {
          this.vips = [];
          this.totalItems = 0;
          this.$message.error('获取念念不忘列表数据格式不正确');
          console.error("获取念念不忘列表数据格式不正确, response:", response);
        }
      } catch (error) {
        this.loadingVips = false;
        console.error("获取念念不忘列表失败:", error);
        this.$message.error('获取念念不忘列表失败');
        this.vips = [];
        this.totalItems = 0;
      }
    },
    async get好久不见() {
      if (!this.NodeUser || !this.NodeUser.id) {
        this.vips = [];
        this.totalItems = 0;
        return;
      }
      try {
        this.loadingVips = true;
        const response = await vipApi.getLongTimeNoSeeVips(this.NodeUser.id, this.currentPage, this.pageSize, this.sortProp, this.sortOrder);
        this.loadingVips = false;
        
        if (response && typeof response.total !== 'undefined' && Array.isArray(response.list)) {
          this.vips = response.list;
          this.totalItems = response.total;
        } else {
          this.vips = [];
          this.totalItems = 0;
          this.$message.error('获取好久不见列表数据格式不正确');
          console.error("获取好久不见列表数据格式不正确, response:", response);
        }
      } catch (error) {
        this.loadingVips = false;
        console.error("获取好久不见列表失败:", error);
        this.$message.error('获取好久不见列表失败');
        this.vips = [];
        this.totalItems = 0;
      }
    },
    OpenSetVip(vip) {
      this.setVipInfoForm = { ...vip }; 
      this.VipSetShow = true;
    },
    async confirmSetVip() {
      try {
        this.updatingVip = true;
        await vipApi.updateVip(this.setVipInfoForm);
        this.updatingVip = false;
        this.VipSetShow = false;
        this.$message.success('会员信息修改成功!');
        this.loadCurrentVips(); 
      } catch (error) {
        this.updatingVip = false;
        console.error("修改VIP信息失败:", error);
        this.$message.error('修改VIP信息操作失败');
      }
    },
    async confirmDelVip(vip) {
      this.$confirm('确定删除该会员?', '提示', {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning'
      }).then(async () => {
        try {
          this.loadingVips = true;
          await vipApi.deleteVip(vip.id);
          this.loadingVips = false;
          this.$message.success('删除成功!');
          if (this.vips.length === 1 && this.currentPage > 1) {
            this.currentPage--;
          }
          this.loadCurrentVips(); 
          await this.getNum(); 
        } catch (error) {
          this.loadingVips = false;
          console.error("删除VIP失败:", error);
          this.$message.error('删除VIP操作失败');
        }
      }).catch(() => {
        this.$message.info('已取消删除');
      });
    },
    allowDrop(draggingNode, dropNode, type) {
      return type === 'inner' && dropNode.data.users !== undefined;
    },
    allowDrag(draggingNode) {
      return draggingNode.data.users === undefined;
    },
    async nodeDrop(draggingNode, dropNode) {
      const user = draggingNode.data;
      const dept = dropNode.data;
      try {
        this.loadingDept = true;
        await userApi.moveUser(user.id, dept.id);
        this.$message.success(`已成功将 [${user.name}] 转移到 [${dept.name}]`);
        await this.getCascadeDept(); 
        this.loadingDept = false;
        if (this.NodeUser && this.NodeUser.id === user.id) {
            this.NodeUser = null; 
            this.vips = [];
            this.totalItems = 0;
        }
      } catch (error) {
        this.loadingDept = false;
        console.error("移动用户失败:", error);
        this.$message.error('移动用户操作失败');
      }
    },
    refreshCurrentNodeVips() {
      if (this.NodeUser && this.NodeUser.id) {
        this.loadCurrentVips();
        this.getNum(); 
      }
    }
  }
}
</script>

<style scoped>
.vip-system {
  padding: 20px;
}

.system-title {
  margin-bottom: 20px;
  color: #303133;
  font-weight: bold;
  text-align: center;
  font-size: 24px;
}

.main-layout {
  display: flex;
  gap: 20px;
}

.sidebar {
  width: 250px;
  flex-shrink: 0;
}

.main-content {
  flex: 1;
  min-width: 0; /* 防止flex子项溢出 */
}

.panel-container {
  background: #fff;
  border-radius: 4px;
  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
  margin-bottom: 20px;
  overflow: hidden;
}

.panel-header {
  padding: 12px 20px;
  background-color: #f5f7fa;
  border-bottom: 1px solid #e6ebf5;
  font-weight: bold;
  color: #303133;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.panel-title {
  display: flex;
  align-items: center;
}

.panel-title i {
  margin-right: 8px;
}

.panel-body {
  padding: 20px;
  min-height: 100px;
}

/* 员工卡片布局 */
.employee-info-container {
  display: flex;
  gap: 20px;
  margin-bottom: 20px;
}

.employee-card {
  flex: 1;
  background-color: #fff;
  border-radius: 4px;
  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
  overflow: hidden;
}

.employee-header {
  background-color: #f5f7fa;
  padding: 12px 15px;
  border-bottom: 1px solid #e6ebf5;
  font-weight: bold;
  font-size: 16px;
  display: flex;
  align-items: center;
}

.employee-header i {
  margin-right: 8px;
}

.employee-content {
  padding: 15px;
}

.employee-name {
  font-size: 18px;
  font-weight: bold;
  margin-bottom: 15px;
  color: #303133;
}

.employee-actions {
  display: flex;
  gap: 10px;
}

.stat-card {
  flex: 1;
  background-color: #fff;
  border-radius: 4px;
  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
  overflow: hidden;
  min-width: 150px;
  transition: all 0.3s;
}

.stat-card.active {
  transform: translateY(-3px);
  box-shadow: 0 4px 18px 0 rgba(0, 0, 0, 0.15);
  border: 1px solid #dcdfe6;
}

.stat-header {
  background-color: #f5f7fa;
  padding: 12px 15px;
  border-bottom: 1px solid #e6ebf5;
  font-weight: bold;
  font-size: 16px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.stat-value {
  font-size: 28px;
  font-weight: bold;
  text-align: center;
  padding: 15px;
  color: #303133;
}

.pagination {
  margin-top: 20px;
  text-align: right;
}

.move-vip-form {
  padding: 0 20px;
}

.move-vip-info {
  margin-bottom: 15px;
}

.member-area {
  margin-top: 20px;
}

.text-muted {
  color: #909399;
  font-size: 14px;
}

.form-row {
  display: flex;
  gap: 20px;
  margin-bottom: 0;
}

.form-item {
  flex: 1;
  min-width: 0;
}

/* 响应式设计 */
@media screen and (max-width: 1200px) {
  .employee-info-container {
    flex-wrap: wrap;
  }
  
  .employee-card {
    min-width: 100%;
  }
  
  .stat-card {
    min-width: 45%;
  }
}

@media screen and (max-width: 992px) {
  .main-layout {
    flex-direction: column;
  }
  
  .sidebar {
    width: 100%;
  }
}

@media screen and (max-width: 768px) {
  .form-row {
    flex-direction: column;
    gap: 0;
  }
  
  .stat-card {
    min-width: 100%;
  }
}
</style>
</file>

<file path="hx-pc-vue/src/main.js">
import Vue from 'vue'
import ElementUI from 'element-ui';
import 'element-ui/lib/theme-chalk/index.css';
import App from './App.vue'
import store from '../vuex/store'
import router from '../route/router.js'
Vue.use(ElementUI);
Vue.config.productionTip = false
import axios from "axios";

// 设置API基础URL - 使用相对路径
axios.defaults.baseURL = '';

// 配置请求拦截器
axios.interceptors.request.use(config => {
  // 如果有token，添加到请求头
  const token = window.localStorage.getItem('token');
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
}, error => {
  return Promise.reject(error);
});

// 配置响应拦截器
axios.interceptors.response.use(response => {
  // 直接返回响应数据
  return response;
}, error => {
  // 处理错误响应
  if (error.response && error.response.status === 401) {
    // 未授权，跳转到登录页
    router.push('/login');
  }
  return Promise.reject(error);
});

// 将axios挂载到Vue原型上
Vue.prototype.$http = axios

// 路由守卫，检查登录状态
router.beforeEach((to, from, next) => {
  if (to.meta.isLogin) {  // 判断该路由是否需要登录权限
    if (window.localStorage.getItem('Flag')) {  // 通过localStorage获取当前的登录状态
      next();
    }
    else {
      next({
        path: '/login',
      })
    }
  }
  else {
    next();
  }
});

// 挂载Vue实例
new Vue({
  store,
  router,
  render: h => h(App),
}).$mount('#app')
</file>

</files>
